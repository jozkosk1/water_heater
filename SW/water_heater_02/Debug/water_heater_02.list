
water_heater_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005090  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005250  08005250  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005250  08005250  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005250  08005250  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  08005264  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08005264  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e668  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ebe  00000000  00000000  0002e6a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00030568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  00030fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001b01  00000000  00000000  00031980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4b1  00000000  00000000  00033481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a159c  00000000  00000000  00040932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1ece  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bac  00000000  00000000  000e1f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005200 	.word	0x08005200

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005200 	.word	0x08005200

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <address_read>:
uint8_t empty = 0;
uint16_t ADC_value[1];
uint16_t ADC_filtered;

uint8_t address_read ()
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
	uint8_t ADR = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(ADR0_GPIO_Port, ADR0_Pin)==GPIO_PIN_SET)
 800082e:	2120      	movs	r1, #32
 8000830:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000834:	f002 fe7c 	bl	8003530 <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b01      	cmp	r3, #1
 800083c:	d102      	bne.n	8000844 <address_read+0x20>
		ADR = ADR + 1;
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3301      	adds	r3, #1
 8000842:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(ADR1_GPIO_Port, ADR1_Pin)==GPIO_PIN_SET)
 8000844:	2110      	movs	r1, #16
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f002 fe71 	bl	8003530 <HAL_GPIO_ReadPin>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d102      	bne.n	800085a <address_read+0x36>
		ADR = ADR + 2;
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	3302      	adds	r3, #2
 8000858:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(ADR2_GPIO_Port, ADR2_Pin)==GPIO_PIN_SET)
 800085a:	2108      	movs	r1, #8
 800085c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000860:	f002 fe66 	bl	8003530 <HAL_GPIO_ReadPin>
 8000864:	4603      	mov	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d102      	bne.n	8000870 <address_read+0x4c>
		ADR = ADR + 4;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	3304      	adds	r3, #4
 800086e:	71fb      	strb	r3, [r7, #7]
	if (HAL_GPIO_ReadPin(ADR3_GPIO_Port, ADR3_Pin)==GPIO_PIN_SET)
 8000870:	2104      	movs	r1, #4
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f002 fe5b 	bl	8003530 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	2b01      	cmp	r3, #1
 800087e:	d102      	bne.n	8000886 <address_read+0x62>
		ADR = ADR + 8;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	3308      	adds	r3, #8
 8000884:	71fb      	strb	r3, [r7, #7]

	switch(ADR)
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	2b0a      	cmp	r3, #10
 800088a:	d849      	bhi.n	8000920 <address_read+0xfc>
 800088c:	a201      	add	r2, pc, #4	; (adr r2, 8000894 <address_read+0x70>)
 800088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000892:	bf00      	nop
 8000894:	08000921 	.word	0x08000921
 8000898:	080008c1 	.word	0x080008c1
 800089c:	080008c9 	.word	0x080008c9
 80008a0:	080008d3 	.word	0x080008d3
 80008a4:	080008dd 	.word	0x080008dd
 80008a8:	080008e7 	.word	0x080008e7
 80008ac:	080008f1 	.word	0x080008f1
 80008b0:	080008fb 	.word	0x080008fb
 80008b4:	08000905 	.word	0x08000905
 80008b8:	0800090f 	.word	0x0800090f
 80008bc:	08000919 	.word	0x08000919
	{
	case 0:
		break;
	case 1:
		HAL_Delay(200);
 80008c0:	20c8      	movs	r0, #200	; 0xc8
 80008c2:	f000 fd85 	bl	80013d0 <HAL_Delay>
		break;
 80008c6:	e02b      	b.n	8000920 <address_read+0xfc>
	case 2:
		HAL_Delay(400);
 80008c8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80008cc:	f000 fd80 	bl	80013d0 <HAL_Delay>
		break;
 80008d0:	e026      	b.n	8000920 <address_read+0xfc>
	case 3:
		HAL_Delay(600);
 80008d2:	f44f 7016 	mov.w	r0, #600	; 0x258
 80008d6:	f000 fd7b 	bl	80013d0 <HAL_Delay>
		break;
 80008da:	e021      	b.n	8000920 <address_read+0xfc>
	case 4:
		HAL_Delay(800);
 80008dc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80008e0:	f000 fd76 	bl	80013d0 <HAL_Delay>
		break;
 80008e4:	e01c      	b.n	8000920 <address_read+0xfc>
	case 5:
		HAL_Delay(1000);
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	f000 fd71 	bl	80013d0 <HAL_Delay>
		break;
 80008ee:	e017      	b.n	8000920 <address_read+0xfc>
	case 6:
		HAL_Delay(1200);
 80008f0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80008f4:	f000 fd6c 	bl	80013d0 <HAL_Delay>
		break;
 80008f8:	e012      	b.n	8000920 <address_read+0xfc>
	case 7:
		HAL_Delay(1400);
 80008fa:	f44f 60af 	mov.w	r0, #1400	; 0x578
 80008fe:	f000 fd67 	bl	80013d0 <HAL_Delay>
		break;
 8000902:	e00d      	b.n	8000920 <address_read+0xfc>
	case 8:
		HAL_Delay(1600);
 8000904:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8000908:	f000 fd62 	bl	80013d0 <HAL_Delay>
		break;
 800090c:	e008      	b.n	8000920 <address_read+0xfc>
	case 9:
		HAL_Delay(1800);
 800090e:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8000912:	f000 fd5d 	bl	80013d0 <HAL_Delay>
		break;
 8000916:	e003      	b.n	8000920 <address_read+0xfc>
	case 10:
		HAL_Delay(100);
 8000918:	2064      	movs	r0, #100	; 0x64
 800091a:	f000 fd59 	bl	80013d0 <HAL_Delay>
		break;
 800091e:	bf00      	nop
	}
	return ADR;
 8000920:	79fb      	ldrb	r3, [r7, #7]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop

0800092c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, Rxdata);
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000936:	4a0f      	ldr	r2, [pc, #60]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000938:	2100      	movs	r1, #0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f001 fe76 	bl	800262c <HAL_CAN_GetRxMessage>
	if(RxHeader.StdId == 0x755)
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f240 7255 	movw	r2, #1877	; 0x755
 8000948:	4293      	cmp	r3, r2
 800094a:	d10c      	bne.n	8000966 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
	{
		/*
		 * txBuffer[0]=(uint8_t)(temp & 0xff);
		 *	txBuffer[1]=(uint8_t)((temp >> 8) & 0xff);
		 */
		air_temperature = (int16_t)(((uint16_t)Rxdata[0]) + (((uint16_t)Rxdata[1]) << 8));
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b07      	ldr	r3, [pc, #28]	; (8000970 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	b29b      	uxth	r3, r3
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b29b      	uxth	r3, r3
 800095c:	4413      	add	r3, r2
 800095e:	b29b      	uxth	r3, r3
 8000960:	b21a      	sxth	r2, r3
 8000962:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000964:	801a      	strh	r2, [r3, #0]
	}

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000130 	.word	0x20000130
 8000974:	200001a8 	.word	0x200001a8
 8000978:	20000028 	.word	0x20000028

0800097c <TxCANMessage>:
void TxCANMessage()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
	TxHeader.DLC = 4;
 8000980:	4b23      	ldr	r3, [pc, #140]	; (8000a10 <TxCANMessage+0x94>)
 8000982:	2204      	movs	r2, #4
 8000984:	611a      	str	r2, [r3, #16]
	TxHeader.ExtId = 0;
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <TxCANMessage+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
	TxHeader.IDE = CAN_ID_STD;
 800098c:	4b20      	ldr	r3, [pc, #128]	; (8000a10 <TxCANMessage+0x94>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <TxCANMessage+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x700 + address;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <TxCANMessage+0x98>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <TxCANMessage+0x94>)
 80009a4:	601a      	str	r2, [r3, #0]
	TxHeader.TransmitGlobalTime = DISABLE;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <TxCANMessage+0x94>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	751a      	strb	r2, [r3, #20]

	TxData[0] = (uint8_t)(temperature & 0xff);
 80009ac:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <TxCANMessage+0x9c>)
 80009ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <TxCANMessage+0xa0>)
 80009b6:	701a      	strb	r2, [r3, #0]
	TxData[1] = (uint8_t)((temperature >> 8) & 0xff);
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <TxCANMessage+0x9c>)
 80009ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009be:	121b      	asrs	r3, r3, #8
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <TxCANMessage+0xa0>)
 80009c6:	705a      	strb	r2, [r3, #1]
	TxData[2] = heating + (empty << 1);
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <TxCANMessage+0xa4>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <TxCANMessage+0xa8>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4413      	add	r3, r2
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <TxCANMessage+0xa0>)
 80009da:	709a      	strb	r2, [r3, #2]
	TxData[3] = 0;
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <TxCANMessage+0xa0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, TxMailbox);
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <TxCANMessage+0xac>)
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <TxCANMessage+0xa0>)
 80009e6:	490a      	ldr	r1, [pc, #40]	; (8000a10 <TxCANMessage+0x94>)
 80009e8:	4810      	ldr	r0, [pc, #64]	; (8000a2c <TxCANMessage+0xb0>)
 80009ea:	f001 fd44 	bl	8002476 <HAL_CAN_AddTxMessage>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2102      	movs	r1, #2
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f002 fdb3 	bl	8003560 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80009fa:	2032      	movs	r0, #50	; 0x32
 80009fc:	f000 fce8 	bl	80013d0 <HAL_Delay>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2102      	movs	r1, #2
 8000a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a08:	f002 fdaa 	bl	8003560 <HAL_GPIO_WritePin>
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000190 	.word	0x20000190
 8000a14:	2000002c 	.word	0x2000002c
 8000a18:	2000002a 	.word	0x2000002a
 8000a1c:	2000017c 	.word	0x2000017c
 8000a20:	2000002e 	.word	0x2000002e
 8000a24:	2000002d 	.word	0x2000002d
 8000a28:	20000184 	.word	0x20000184
 8000a2c:	20000030 	.word	0x20000030

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t can_timestamp = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3a:	f000 fc63 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3e:	f000 f8f5 	bl	8000c2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a42:	f000 fa47 	bl	8000ed4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a46:	f000 fa27 	bl	8000e98 <MX_DMA_Init>
  MX_CAN_Init();
 8000a4a:	f000 f9a3 	bl	8000d94 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000a4e:	f000 f9f3 	bl	8000e38 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000a52:	f000 f943 	bl	8000cdc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SENSOR_GND_GPIO_Port, SENSOR_GND_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	486b      	ldr	r0, [pc, #428]	; (8000c08 <main+0x1d8>)
 8000a5c:	f002 fd80 	bl	8003560 <HAL_GPIO_WritePin>
  HAL_CAN_Start(&hcan);
 8000a60:	486a      	ldr	r0, [pc, #424]	; (8000c0c <main+0x1dc>)
 8000a62:	f001 fcc4 	bl	80023ee <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000a66:	2102      	movs	r1, #2
 8000a68:	4868      	ldr	r0, [pc, #416]	; (8000c0c <main+0x1dc>)
 8000a6a:	f001 fef1 	bl	8002850 <HAL_CAN_ActivateNotification>
  //SI7051_start_conversion(&hi2c1);
  HAL_ADC_Start_DMA(&hadc1, ADC_value, 1);
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4967      	ldr	r1, [pc, #412]	; (8000c10 <main+0x1e0>)
 8000a72:	4868      	ldr	r0, [pc, #416]	; (8000c14 <main+0x1e4>)
 8000a74:	f000 fe74 	bl	8001760 <HAL_ADC_Start_DMA>
  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4862      	ldr	r0, [pc, #392]	; (8000c08 <main+0x1d8>)
 8000a7e:	f002 fd6f 	bl	8003560 <HAL_GPIO_WritePin>
  address = address_read();
 8000a82:	f7ff fecf 	bl	8000824 <address_read>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b63      	ldr	r3, [pc, #396]	; (8000c18 <main+0x1e8>)
 8000a8c:	701a      	strb	r2, [r3, #0]
  can_timestamp = HAL_GetTick();
 8000a8e:	f000 fc93 	bl	80013b8 <HAL_GetTick>
 8000a92:	6078      	str	r0, [r7, #4]
  HAL_Delay(20);
 8000a94:	2014      	movs	r0, #20
 8000a96:	f000 fc9b 	bl	80013d0 <HAL_Delay>
  ADC_filtered = ADC_value[0];
 8000a9a:	4b5d      	ldr	r3, [pc, #372]	; (8000c10 <main+0x1e0>)
 8000a9c:	881a      	ldrh	r2, [r3, #0]
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	; (8000c1c <main+0x1ec>)
 8000aa0:	801a      	strh	r2, [r3, #0]
	   * TEMP: 80 ADC 1229
	   * TEMP:  ADC
	   * TEMP:  ADC
	   * TEMP:  ADC
	   * TEMP:  ADC */
	  ADC_filtered = (uint16_t)((float)ADC_filtered * 0.9 + (float)ADC_value[0] * 0.1);
 8000aa2:	4b5e      	ldr	r3, [pc, #376]	; (8000c1c <main+0x1ec>)
 8000aa4:	881b      	ldrh	r3, [r3, #0]
 8000aa6:	ee07 3a90 	vmov	s15, r3
 8000aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aae:	ee17 0a90 	vmov	r0, s15
 8000ab2:	f7ff fe17 	bl	80006e4 <__aeabi_f2d>
 8000ab6:	a34c      	add	r3, pc, #304	; (adr r3, 8000be8 <main+0x1b8>)
 8000ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000abc:	f7ff fb84 	bl	80001c8 <__aeabi_dmul>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	4614      	mov	r4, r2
 8000ac6:	461d      	mov	r5, r3
 8000ac8:	4b51      	ldr	r3, [pc, #324]	; (8000c10 <main+0x1e0>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	ee07 3a90 	vmov	s15, r3
 8000ad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ad4:	ee17 0a90 	vmov	r0, s15
 8000ad8:	f7ff fe04 	bl	80006e4 <__aeabi_f2d>
 8000adc:	a344      	add	r3, pc, #272	; (adr r3, 8000bf0 <main+0x1c0>)
 8000ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae2:	f7ff fb71 	bl	80001c8 <__aeabi_dmul>
 8000ae6:	4602      	mov	r2, r0
 8000ae8:	460b      	mov	r3, r1
 8000aea:	4620      	mov	r0, r4
 8000aec:	4629      	mov	r1, r5
 8000aee:	f7ff fc9b 	bl	8000428 <__adddf3>
 8000af2:	4602      	mov	r2, r0
 8000af4:	460b      	mov	r3, r1
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	f7ff fe73 	bl	80007e4 <__aeabi_d2uiz>
 8000afe:	4603      	mov	r3, r0
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b46      	ldr	r3, [pc, #280]	; (8000c1c <main+0x1ec>)
 8000b04:	801a      	strh	r2, [r3, #0]
	  temperature = (int16_t)((0.2651*(float)ADC_filtered) - 270.86);
 8000b06:	4b45      	ldr	r3, [pc, #276]	; (8000c1c <main+0x1ec>)
 8000b08:	881b      	ldrh	r3, [r3, #0]
 8000b0a:	ee07 3a90 	vmov	s15, r3
 8000b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b12:	ee17 0a90 	vmov	r0, s15
 8000b16:	f7ff fde5 	bl	80006e4 <__aeabi_f2d>
 8000b1a:	a337      	add	r3, pc, #220	; (adr r3, 8000bf8 <main+0x1c8>)
 8000b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b20:	f7ff fb52 	bl	80001c8 <__aeabi_dmul>
 8000b24:	4602      	mov	r2, r0
 8000b26:	460b      	mov	r3, r1
 8000b28:	4610      	mov	r0, r2
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	a334      	add	r3, pc, #208	; (adr r3, 8000c00 <main+0x1d0>)
 8000b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b32:	f7ff fc77 	bl	8000424 <__aeabi_dsub>
 8000b36:	4602      	mov	r2, r0
 8000b38:	460b      	mov	r3, r1
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f7ff fe29 	bl	8000794 <__aeabi_d2iz>
 8000b42:	4603      	mov	r3, r0
 8000b44:	b21a      	sxth	r2, r3
 8000b46:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <main+0x1f0>)
 8000b48:	801a      	strh	r2, [r3, #0]

	  //SI7051_start_conversion(&hi2c1);
	  if ((HAL_GetTick() - can_timestamp) > 2000)
 8000b4a:	f000 fc35 	bl	80013b8 <HAL_GetTick>
 8000b4e:	4602      	mov	r2, r0
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	1ad3      	subs	r3, r2, r3
 8000b54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b58:	d904      	bls.n	8000b64 <main+0x134>
	  {
		  TxCANMessage();
 8000b5a:	f7ff ff0f 	bl	800097c <TxCANMessage>
		  can_timestamp = HAL_GetTick();
 8000b5e:	f000 fc2b 	bl	80013b8 <HAL_GetTick>
 8000b62:	6078      	str	r0, [r7, #4]
	  }
	  HAL_Delay(10);
 8000b64:	200a      	movs	r0, #10
 8000b66:	f000 fc33 	bl	80013d0 <HAL_Delay>
	  //temperature = SI7051_read_temperature(&hi2c1);
	  if (HAL_GPIO_ReadPin(SENSOR_GPIO_Port, SENSOR_Pin))
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <main+0x1d8>)
 8000b6e:	f002 fcdf 	bl	8003530 <HAL_GPIO_ReadPin>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d024      	beq.n	8000bc2 <main+0x192>
	  {
		  empty = 0;
 8000b78:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <main+0x1f4>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2101      	movs	r1, #1
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f002 fceb 	bl	8003560 <HAL_GPIO_WritePin>
		  if (temperature < (TARGET_TEMP - HISTERESIS))
 8000b8a:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <main+0x1f0>)
 8000b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b90:	2b27      	cmp	r3, #39	; 0x27
 8000b92:	dc07      	bgt.n	8000ba4 <main+0x174>
		  {
			  heating = 1;
 8000b94:	4b24      	ldr	r3, [pc, #144]	; (8000c28 <main+0x1f8>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	481a      	ldr	r0, [pc, #104]	; (8000c08 <main+0x1d8>)
 8000ba0:	f002 fcde 	bl	8003560 <HAL_GPIO_WritePin>
		  }
		  if (temperature > (TARGET_TEMP + HISTERESIS))
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <main+0x1f0>)
 8000ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000baa:	2b3c      	cmp	r3, #60	; 0x3c
 8000bac:	f77f af79 	ble.w	8000aa2 <main+0x72>
		  {
			  heating = 0;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <main+0x1f8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <main+0x1d8>)
 8000bbc:	f002 fcd0 	bl	8003560 <HAL_GPIO_WritePin>
 8000bc0:	e76f      	b.n	8000aa2 <main+0x72>
		  }
	  }
	  else
	  {
		  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f002 fcc9 	bl	8003560 <HAL_GPIO_WritePin>
		  heating = 0;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <main+0x1f8>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
		  empty = 1;
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <main+0x1f4>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	480a      	ldr	r0, [pc, #40]	; (8000c08 <main+0x1d8>)
 8000be0:	f002 fcbe 	bl	8003560 <HAL_GPIO_WritePin>
	  ADC_filtered = (uint16_t)((float)ADC_filtered * 0.9 + (float)ADC_value[0] * 0.1);
 8000be4:	e75d      	b.n	8000aa2 <main+0x72>
 8000be6:	bf00      	nop
 8000be8:	cccccccd 	.word	0xcccccccd
 8000bec:	3feccccc 	.word	0x3feccccc
 8000bf0:	9999999a 	.word	0x9999999a
 8000bf4:	3fb99999 	.word	0x3fb99999
 8000bf8:	fd8adaba 	.word	0xfd8adaba
 8000bfc:	3fd0f765 	.word	0x3fd0f765
 8000c00:	8f5c28f6 	.word	0x8f5c28f6
 8000c04:	4070edc2 	.word	0x4070edc2
 8000c08:	48000400 	.word	0x48000400
 8000c0c:	20000030 	.word	0x20000030
 8000c10:	20000058 	.word	0x20000058
 8000c14:	2000005c 	.word	0x2000005c
 8000c18:	2000002c 	.word	0x2000002c
 8000c1c:	200001c4 	.word	0x200001c4
 8000c20:	2000002a 	.word	0x2000002a
 8000c24:	2000002e 	.word	0x2000002e
 8000c28:	2000002d 	.word	0x2000002d

08000c2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b09c      	sub	sp, #112	; 0x70
 8000c30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c36:	2228      	movs	r2, #40	; 0x28
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f004 fad8 	bl	80051f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c40:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c50:	463b      	mov	r3, r7
 8000c52:	2234      	movs	r2, #52	; 0x34
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 faca 	bl	80051f0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c60:	2301      	movs	r3, #1
 8000c62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c64:	2310      	movs	r3, #16
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f002 fc88 	bl	8003590 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c86:	f000 f9a1 	bl	8000fcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c9e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 fb7b 	bl	80043a0 <HAL_RCC_ClockConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000cb0:	f000 f98c 	bl	8000fcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC1;
 8000cb4:	2381      	movs	r3, #129	; 0x81
 8000cb6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fda1 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000cd0:	f000 f97c 	bl	8000fcc <Error_Handler>
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3770      	adds	r7, #112	; 0x70
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
 8000cf0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cf2:	4b27      	ldr	r3, [pc, #156]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000cf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000cf8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cfa:	4b25      	ldr	r3, [pc, #148]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d0e:	2201      	movs	r2, #1
 8000d10:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d2c:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d40:	4b13      	ldr	r3, [pc, #76]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d4c:	4810      	ldr	r0, [pc, #64]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d4e:	f000 fb81 	bl	8001454 <HAL_ADC_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000d58:	f000 f938 	bl	8000fcc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000d5c:	230a      	movs	r3, #10
 8000d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_ADC1_Init+0xb4>)
 8000d7a:	f000 fd8d 	bl	8001898 <HAL_ADC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d84:	f000 f922 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000005c 	.word	0x2000005c

08000d94 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000d9a:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000d9c:	4a25      	ldr	r2, [pc, #148]	; (8000e34 <MX_CAN_Init+0xa0>)
 8000d9e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000da2:	2212      	movs	r2, #18
 8000da4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000da6:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000db2:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000db4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000db8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_7TQ;
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000dbc:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8000dc0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000dc2:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000dc8:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000de6:	4812      	ldr	r0, [pc, #72]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000de8:	f001 f93c 	bl	8002064 <HAL_CAN_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000df2:	f000 f8eb 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 10;
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000e02:	2300      	movs	r3, #0
 8000e04:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4803      	ldr	r0, [pc, #12]	; (8000e30 <MX_CAN_Init+0x9c>)
 8000e24:	f001 fa19 	bl	800225a <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3728      	adds	r7, #40	; 0x28
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000030 	.word	0x20000030
 8000e34:	40006400 	.word	0x40006400

08000e38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e3e:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <MX_USART1_UART_Init+0x5c>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e44:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_USART1_UART_Init+0x58>)
 8000e7c:	f003 fe58 	bl	8004b30 <HAL_HalfDuplex_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e86:	f000 f8a1 	bl	8000fcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	200000ac 	.word	0x200000ac
 8000e94:	40013800 	.word	0x40013800

08000e98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_DMA_Init+0x38>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a0b      	ldr	r2, [pc, #44]	; (8000ed0 <MX_DMA_Init+0x38>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6153      	str	r3, [r2, #20]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_DMA_Init+0x38>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	200b      	movs	r0, #11
 8000ebc:	f001 fff9 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec0:	200b      	movs	r0, #11
 8000ec2:	f002 f812 	bl	8002eea <HAL_NVIC_EnableIRQ>

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b36      	ldr	r3, [pc, #216]	; (8000fc4 <MX_GPIO_Init+0xf0>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a35      	ldr	r2, [pc, #212]	; (8000fc4 <MX_GPIO_Init+0xf0>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <MX_GPIO_Init+0xf0>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b30      	ldr	r3, [pc, #192]	; (8000fc4 <MX_GPIO_Init+0xf0>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a2f      	ldr	r2, [pc, #188]	; (8000fc4 <MX_GPIO_Init+0xf0>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <MX_GPIO_Init+0xf0>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f16:	607b      	str	r3, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2103      	movs	r1, #3
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f22:	f002 fb1d 	bl	8003560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HEATER_Pin|SENSOR_GND_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	21a0      	movs	r1, #160	; 0xa0
 8000f2a:	4827      	ldr	r0, [pc, #156]	; (8000fc8 <MX_GPIO_Init+0xf4>)
 8000f2c:	f002 fb18 	bl	8003560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_B_Pin;
 8000f30:	2303      	movs	r3, #3
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4a:	f002 f97f 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pins : ADR3_Pin ADR2_Pin ADR1_Pin ADR0_Pin */
  GPIO_InitStruct.Pin = ADR3_Pin|ADR2_Pin|ADR1_Pin|ADR0_Pin;
 8000f4e:	233c      	movs	r3, #60	; 0x3c
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f002 f972 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_Pin */
  GPIO_InitStruct.Pin = SENSOR_Pin;
 8000f68:	2310      	movs	r3, #16
 8000f6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	4619      	mov	r1, r3
 8000f7a:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_GPIO_Init+0xf4>)
 8000f7c:	f002 f966 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pins : HEATER_Pin SENSOR_GND_Pin */
  GPIO_InitStruct.Pin = HEATER_Pin|SENSOR_GND_Pin;
 8000f80:	23a0      	movs	r3, #160	; 0xa0
 8000f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4619      	mov	r1, r3
 8000f96:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_GPIO_Init+0xf4>)
 8000f98:	f002 f958 	bl	800324c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9c:	2340      	movs	r3, #64	; 0x40
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa0:	2312      	movs	r3, #18
 8000fa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fac:	2304      	movs	r3, #4
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_GPIO_Init+0xf4>)
 8000fb8:	f002 f948 	bl	800324c <HAL_GPIO_Init>

}
 8000fbc:	bf00      	nop
 8000fbe:	3720      	adds	r7, #32
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	48000400 	.word	0x48000400

08000fcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd0:	b672      	cpsid	i
}
 8000fd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <Error_Handler+0x8>
	...

08000fd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_MspInit+0x44>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <HAL_MspInit+0x44>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <HAL_MspInit+0x44>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <HAL_MspInit+0x44>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_MspInit+0x44>)
 8000ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001000:	61d3      	str	r3, [r2, #28]
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_MspInit+0x44>)
 8001004:	69db      	ldr	r3, [r3, #28]
 8001006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100a:	603b      	str	r3, [r7, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001040:	d14c      	bne.n	80010dc <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001042:	4b28      	ldr	r3, [pc, #160]	; (80010e4 <HAL_ADC_MspInit+0xc4>)
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	4a27      	ldr	r2, [pc, #156]	; (80010e4 <HAL_ADC_MspInit+0xc4>)
 8001048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104c:	6153      	str	r3, [r2, #20]
 800104e:	4b25      	ldr	r3, [pc, #148]	; (80010e4 <HAL_ADC_MspInit+0xc4>)
 8001050:	695b      	ldr	r3, [r3, #20]
 8001052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_ADC_MspInit+0xc4>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <HAL_ADC_MspInit+0xc4>)
 8001060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <HAL_ADC_MspInit+0xc4>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001076:	2303      	movs	r3, #3
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f002 f8e0 	bl	800324c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <HAL_ADC_MspInit+0xcc>)
 8001090:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010a4:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 80010a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 80010ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 80010b6:	2220      	movs	r2, #32
 80010b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010c0:	4809      	ldr	r0, [pc, #36]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 80010c2:	f001 ff2c 	bl	8002f1e <HAL_DMA_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80010cc:	f7ff ff7e 	bl	8000fcc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 80010d4:	639a      	str	r2, [r3, #56]	; 0x38
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_ADC_MspInit+0xc8>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000
 80010e8:	20000138 	.word	0x20000138
 80010ec:	40020008 	.word	0x40020008

080010f0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <HAL_CAN_MspInit+0x90>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d131      	bne.n	8001176 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <HAL_CAN_MspInit+0x94>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_CAN_MspInit+0x94>)
 8001118:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_CAN_MspInit+0x94>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_CAN_MspInit+0x94>)
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4a15      	ldr	r2, [pc, #84]	; (8001184 <HAL_CAN_MspInit+0x94>)
 8001130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001134:	6153      	str	r3, [r2, #20]
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_CAN_MspInit+0x94>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001142:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001154:	2309      	movs	r3, #9
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f002 f873 	bl	800324c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2014      	movs	r0, #20
 800116c:	f001 fea1 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8001170:	2014      	movs	r0, #20
 8001172:	f001 feba 	bl	8002eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	; 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40006400 	.word	0x40006400
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_UART_MspInit+0x80>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d129      	bne.n	80011fe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011aa:	4b18      	ldr	r3, [pc, #96]	; (800120c <HAL_UART_MspInit+0x84>)
 80011ac:	699b      	ldr	r3, [r3, #24]
 80011ae:	4a17      	ldr	r2, [pc, #92]	; (800120c <HAL_UART_MspInit+0x84>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6193      	str	r3, [r2, #24]
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <HAL_UART_MspInit+0x84>)
 80011b8:	699b      	ldr	r3, [r3, #24]
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_UART_MspInit+0x84>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	4a11      	ldr	r2, [pc, #68]	; (800120c <HAL_UART_MspInit+0x84>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_UART_MspInit+0x84>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e0:	2312      	movs	r3, #18
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ec:	2307      	movs	r3, #7
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f002 f827 	bl	800324c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011fe:	bf00      	nop
 8001200:	3728      	adds	r7, #40	; 0x28
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40013800 	.word	0x40013800
 800120c:	40021000 	.word	0x40021000

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f898 	bl	8001390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Channel1_IRQHandler+0x10>)
 800126a:	f001 fefe 	bl	800306a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000138 	.word	0x20000138

08001278 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 and USB low priority interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800127e:	f001 fb0d 	bl	800289c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000030 	.word	0x20000030

0800128c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopForever+0x6>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopForever+0xe>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopForever+0x16>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012da:	f7ff ffd7 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f003 ff63 	bl	80051a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012e2:	f7ff fba5 	bl	8000a30 <main>

080012e6 <LoopForever>:

LoopForever:
    b LoopForever
 80012e6:	e7fe      	b.n	80012e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f4:	08005258 	.word	0x08005258
  ldr r2, =_sbss
 80012f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012fc:	200001cc 	.word	0x200001cc

08001300 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC1_IRQHandler>
	...

08001304 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <HAL_Init+0x28>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a07      	ldr	r2, [pc, #28]	; (800132c <HAL_Init+0x28>)
 800130e:	f043 0310 	orr.w	r3, r3, #16
 8001312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001314:	2003      	movs	r0, #3
 8001316:	f001 fdc1 	bl	8002e9c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800131a:	2000      	movs	r0, #0
 800131c:	f000 f808 	bl	8001330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001320:	f7ff fe5a 	bl	8000fd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40022000 	.word	0x40022000

08001330 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_InitTick+0x54>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <HAL_InitTick+0x58>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001346:	fbb3 f3f1 	udiv	r3, r3, r1
 800134a:	fbb2 f3f3 	udiv	r3, r2, r3
 800134e:	4618      	mov	r0, r3
 8001350:	f001 fdd9 	bl	8002f06 <HAL_SYSTICK_Config>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e00e      	b.n	800137c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d80a      	bhi.n	800137a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001364:	2200      	movs	r2, #0
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	f04f 30ff 	mov.w	r0, #4294967295
 800136c:	f001 fda1 	bl	8002eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001370:	4a06      	ldr	r2, [pc, #24]	; (800138c <HAL_InitTick+0x5c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
 8001378:	e000      	b.n	800137c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000000 	.word	0x20000000
 8001388:	20000008 	.word	0x20000008
 800138c:	20000004 	.word	0x20000004

08001390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <HAL_IncTick+0x20>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_IncTick+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4413      	add	r3, r2
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_IncTick+0x24>)
 80013a2:	6013      	str	r3, [r2, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000008 	.word	0x20000008
 80013b4:	200001c8 	.word	0x200001c8

080013b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80013bc:	4b03      	ldr	r3, [pc, #12]	; (80013cc <HAL_GetTick+0x14>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	200001c8 	.word	0x200001c8

080013d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff ffee 	bl	80013b8 <HAL_GetTick>
 80013dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4413      	add	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013f6:	bf00      	nop
 80013f8:	f7ff ffde 	bl	80013b8 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008

08001418 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b09a      	sub	sp, #104	; 0x68
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e169      	b.n	8001748 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d176      	bne.n	8001574 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d152      	bne.n	8001534 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fdb9 	bl	8001020 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d13b      	bne.n	8001534 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f000 fd6b 	bl	8001f98 <ADC_Disable>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d12f      	bne.n	8001534 <HAL_ADC_Init+0xe0>
 80014d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d12b      	bne.n	8001534 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014e4:	f023 0302 	bic.w	r3, r3, #2
 80014e8:	f043 0202 	orr.w	r2, r3, #2
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014fe:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800150e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001510:	4b8f      	ldr	r3, [pc, #572]	; (8001750 <HAL_ADC_Init+0x2fc>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a8f      	ldr	r2, [pc, #572]	; (8001754 <HAL_ADC_Init+0x300>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9a      	lsrs	r2, r3, #18
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001526:	e002      	b.n	800152e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	3b01      	subs	r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800152e:	68bb      	ldr	r3, [r7, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f9      	bne.n	8001528 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800154c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001550:	d110      	bne.n	8001574 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f023 0312 	bic.w	r3, r3, #18
 800155a:	f043 0210 	orr.w	r2, r3, #16
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f043 0201 	orr.w	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f003 0310 	and.w	r3, r3, #16
 800157c:	2b00      	cmp	r3, #0
 800157e:	f040 80d6 	bne.w	800172e <HAL_ADC_Init+0x2da>
 8001582:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001586:	2b00      	cmp	r3, #0
 8001588:	f040 80d1 	bne.w	800172e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001596:	2b00      	cmp	r3, #0
 8001598:	f040 80c9 	bne.w	800172e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80015a4:	f043 0202 	orr.w	r2, r3, #2
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ac:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <HAL_ADC_Init+0x304>)
 80015ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_ADC_Init+0x180>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_ADC_Init+0x180>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_ADC_Init+0x182>
 80015d4:	2300      	movs	r3, #0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d11c      	bne.n	8001614 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015da:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d010      	beq.n	8001602 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d107      	bne.n	80015fc <HAL_ADC_Init+0x1a8>
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d101      	bne.n	80015fc <HAL_ADC_Init+0x1a8>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_ADC_Init+0x1aa>
 80015fc:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	431a      	orrs	r2, r3
 8001610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001612:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7e5b      	ldrb	r3, [r3, #25]
 8001618:	035b      	lsls	r3, r3, #13
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800161e:	2a01      	cmp	r2, #1
 8001620:	d002      	beq.n	8001628 <HAL_ADC_Init+0x1d4>
 8001622:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001626:	e000      	b.n	800162a <HAL_ADC_Init+0x1d6>
 8001628:	2200      	movs	r2, #0
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	431a      	orrs	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	4313      	orrs	r3, r2
 8001638:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800163a:	4313      	orrs	r3, r2
 800163c:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d11b      	bne.n	8001680 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7e5b      	ldrb	r3, [r3, #25]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001654:	3b01      	subs	r3, #1
 8001656:	045a      	lsls	r2, r3, #17
 8001658:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800165a:	4313      	orrs	r3, r2
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	663b      	str	r3, [r7, #96]	; 0x60
 8001662:	e00d      	b.n	8001680 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001668:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	2b01      	cmp	r3, #1
 8001686:	d007      	beq.n	8001698 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	4313      	orrs	r3, r2
 8001692:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001694:	4313      	orrs	r3, r2
 8001696:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d114      	bne.n	80016d0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016b4:	f023 0302 	bic.w	r3, r3, #2
 80016b8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7e1b      	ldrb	r3, [r3, #24]
 80016be:	039a      	lsls	r2, r3, #14
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4313      	orrs	r3, r2
 80016ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016cc:	4313      	orrs	r3, r2
 80016ce:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_ADC_Init+0x308>)
 80016d8:	4013      	ands	r3, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80016e0:	430b      	orrs	r3, r1
 80016e2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d10c      	bne.n	8001706 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f023 010f 	bic.w	r1, r3, #15
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	1e5a      	subs	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	430a      	orrs	r2, r1
 8001702:	631a      	str	r2, [r3, #48]	; 0x30
 8001704:	e007      	b.n	8001716 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 020f 	bic.w	r2, r2, #15
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f023 0303 	bic.w	r3, r3, #3
 8001724:	f043 0201 	orr.w	r2, r3, #1
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	641a      	str	r2, [r3, #64]	; 0x40
 800172c:	e00a      	b.n	8001744 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f023 0312 	bic.w	r3, r3, #18
 8001736:	f043 0210 	orr.w	r2, r3, #16
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001744:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001748:	4618      	mov	r0, r3
 800174a:	3768      	adds	r7, #104	; 0x68
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000000 	.word	0x20000000
 8001754:	431bde83 	.word	0x431bde83
 8001758:	50000300 	.word	0x50000300
 800175c:	fff0c007 	.word	0xfff0c007

08001760 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d17e      	bne.n	800187c <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_ADC_Start_DMA+0x2c>
 8001788:	2302      	movs	r3, #2
 800178a:	e07a      	b.n	8001882 <HAL_ADC_Start_DMA+0x122>
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fb9b 	bl	8001ed0 <ADC_Enable>
 800179a:	4603      	mov	r3, r0
 800179c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800179e:	7dfb      	ldrb	r3, [r7, #23]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d166      	bne.n	8001872 <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017da:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017ee:	d106      	bne.n	80017fe <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f023 0206 	bic.w	r2, r3, #6
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	645a      	str	r2, [r3, #68]	; 0x44
 80017fc:	e002      	b.n	8001804 <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2200      	movs	r2, #0
 8001802:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2200      	movs	r2, #0
 8001808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001810:	4a1e      	ldr	r2, [pc, #120]	; (800188c <HAL_ADC_Start_DMA+0x12c>)
 8001812:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001818:	4a1d      	ldr	r2, [pc, #116]	; (8001890 <HAL_ADC_Start_DMA+0x130>)
 800181a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <HAL_ADC_Start_DMA+0x134>)
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	221c      	movs	r2, #28
 800182a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f042 0210 	orr.w	r2, r2, #16
 800183a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	3340      	adds	r3, #64	; 0x40
 8001856:	4619      	mov	r1, r3
 8001858:	68ba      	ldr	r2, [r7, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f001 fba6 	bl	8002fac <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f042 0204 	orr.w	r2, r2, #4
 800186e:	609a      	str	r2, [r3, #8]
 8001870:	e006      	b.n	8001880 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800187a:	e001      	b.n	8001880 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800187c:	2302      	movs	r3, #2
 800187e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001880:	7dfb      	ldrb	r3, [r7, #23]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08001e05 	.word	0x08001e05
 8001890:	08001e7f 	.word	0x08001e7f
 8001894:	08001e9b 	.word	0x08001e9b

08001898 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001898:	b480      	push	{r7}
 800189a:	b09b      	sub	sp, #108	; 0x6c
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d101      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x22>
 80018b6:	2302      	movs	r3, #2
 80018b8:	e299      	b.n	8001dee <HAL_ADC_ConfigChannel+0x556>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f040 827d 	bne.w	8001dcc <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d81c      	bhi.n	8001914 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	461a      	mov	r2, r3
 80018ee:	231f      	movs	r3, #31
 80018f0:	4093      	lsls	r3, r2
 80018f2:	43db      	mvns	r3, r3
 80018f4:	4019      	ands	r1, r3
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6818      	ldr	r0, [r3, #0]
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	fa00 f203 	lsl.w	r2, r0, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	631a      	str	r2, [r3, #48]	; 0x30
 8001912:	e063      	b.n	80019dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b09      	cmp	r3, #9
 800191a:	d81e      	bhi.n	800195a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4413      	add	r3, r2
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	3b1e      	subs	r3, #30
 8001930:	221f      	movs	r2, #31
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43db      	mvns	r3, r3
 8001938:	4019      	ands	r1, r3
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6818      	ldr	r0, [r3, #0]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	3b1e      	subs	r3, #30
 800194c:	fa00 f203 	lsl.w	r2, r0, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
 8001958:	e040      	b.n	80019dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b0e      	cmp	r3, #14
 8001960:	d81e      	bhi.n	80019a0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	3b3c      	subs	r3, #60	; 0x3c
 8001976:	221f      	movs	r2, #31
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	4019      	ands	r1, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	3b3c      	subs	r3, #60	; 0x3c
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	639a      	str	r2, [r3, #56]	; 0x38
 800199e:	e01d      	b.n	80019dc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	3b5a      	subs	r3, #90	; 0x5a
 80019b4:	221f      	movs	r2, #31
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4019      	ands	r1, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	3b5a      	subs	r3, #90	; 0x5a
 80019d0:	fa00 f203 	lsl.w	r2, r0, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f040 80e5 	bne.w	8001bb6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b09      	cmp	r3, #9
 80019f2:	d91c      	bls.n	8001a2e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	6999      	ldr	r1, [r3, #24]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	3b1e      	subs	r3, #30
 8001a06:	2207      	movs	r2, #7
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	4019      	ands	r1, r3
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	6898      	ldr	r0, [r3, #8]
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	005b      	lsls	r3, r3, #1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	3b1e      	subs	r3, #30
 8001a20:	fa00 f203 	lsl.w	r2, r0, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	619a      	str	r2, [r3, #24]
 8001a2c:	e019      	b.n	8001a62 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6959      	ldr	r1, [r3, #20]
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2207      	movs	r2, #7
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	4019      	ands	r1, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	6898      	ldr	r0, [r3, #8]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	fa00 f203 	lsl.w	r2, r0, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	08db      	lsrs	r3, r3, #3
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d84f      	bhi.n	8001b24 <HAL_ADC_ConfigChannel+0x28c>
 8001a84:	a201      	add	r2, pc, #4	; (adr r2, 8001a8c <HAL_ADC_ConfigChannel+0x1f4>)
 8001a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8a:	bf00      	nop
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001abf 	.word	0x08001abf
 8001a94:	08001ae1 	.word	0x08001ae1
 8001a98:	08001b03 	.word	0x08001b03
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aa2:	4b99      	ldr	r3, [pc, #612]	; (8001d08 <HAL_ADC_ConfigChannel+0x470>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	0691      	lsls	r1, r2, #26
 8001aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001aba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001abc:	e07e      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ac4:	4b90      	ldr	r3, [pc, #576]	; (8001d08 <HAL_ADC_ConfigChannel+0x470>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	0691      	lsls	r1, r2, #26
 8001ace:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001adc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ade:	e06d      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ae6:	4b88      	ldr	r3, [pc, #544]	; (8001d08 <HAL_ADC_ConfigChannel+0x470>)
 8001ae8:	4013      	ands	r3, r2
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	6812      	ldr	r2, [r2, #0]
 8001aee:	0691      	lsls	r1, r2, #26
 8001af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001af2:	430a      	orrs	r2, r1
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001afe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b00:	e05c      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001b08:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <HAL_ADC_ConfigChannel+0x470>)
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	0691      	lsls	r1, r2, #26
 8001b12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b14:	430a      	orrs	r2, r1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b20:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001b22:	e04b      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	069b      	lsls	r3, r3, #26
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d107      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b46:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	069b      	lsls	r3, r3, #26
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d107      	bne.n	8001b6c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b6a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	069b      	lsls	r3, r3, #26
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d107      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001b8e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	069b      	lsls	r3, r3, #26
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d10a      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001bb2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001bb4:	e001      	b.n	8001bba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001bb6:	bf00      	nop
 8001bb8:	e000      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x324>
      break;
 8001bba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d108      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x344>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x344>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_ADC_ConfigChannel+0x346>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f040 80ff 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d00f      	beq.n	8001c0c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43da      	mvns	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	400a      	ands	r2, r1
 8001c06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001c0a:	e049      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b09      	cmp	r3, #9
 8001c2c:	d91c      	bls.n	8001c68 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6999      	ldr	r1, [r3, #24]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3b1b      	subs	r3, #27
 8001c40:	2207      	movs	r2, #7
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	4019      	ands	r1, r3
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6898      	ldr	r0, [r3, #8]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4613      	mov	r3, r2
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	3b1b      	subs	r3, #27
 8001c5a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	619a      	str	r2, [r3, #24]
 8001c66:	e01b      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6959      	ldr	r1, [r3, #20]
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	1c5a      	adds	r2, r3, #1
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	2207      	movs	r2, #7
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	4019      	ands	r1, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6898      	ldr	r0, [r3, #8]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_ADC_ConfigChannel+0x474>)
 8001ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d105      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d014      	beq.n	8001ce2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001cbc:	2b11      	cmp	r3, #17
 8001cbe:	d105      	bne.n	8001ccc <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00a      	beq.n	8001ce2 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001cd0:	2b12      	cmp	r3, #18
 8001cd2:	f040 8086 	bne.w	8001de2 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d17f      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d10d      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x478>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d106      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x478>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e005      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x47a>
 8001d06:	bf00      	nop
 8001d08:	83fff000 	.word	0x83fff000
 8001d0c:	50000300 	.word	0x50000300
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d150      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d16:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d010      	beq.n	8001d3e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d107      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x4a0>
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x4a0>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x4a2>
 8001d38:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d13c      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b10      	cmp	r3, #16
 8001d44:	d11d      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x4ea>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d4e:	d118      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_ADC_ConfigChannel+0x564>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <HAL_ADC_ConfigChannel+0x568>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0c9a      	lsrs	r2, r3, #18
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d72:	e002      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f9      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d80:	e02e      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2b11      	cmp	r3, #17
 8001d88:	d10b      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x50a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d92:	d106      	bne.n	8001da2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001da0:	e01e      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b12      	cmp	r3, #18
 8001da8:	d11a      	bne.n	8001de0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001db4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001db6:	e013      	b.n	8001de0 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f043 0220 	orr.w	r2, r3, #32
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dca:	e00a      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f043 0220 	orr.w	r2, r3, #32
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001dde:	e000      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001de0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001dea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	376c      	adds	r7, #108	; 0x6c
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	431bde83 	.word	0x431bde83

08001e04 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d126      	bne.n	8001e6c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d115      	bne.n	8001e64 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d111      	bne.n	8001e64 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f043 0201 	orr.w	r2, r3, #1
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e64:	68f8      	ldr	r0, [r7, #12]
 8001e66:	f7ff fad7 	bl	8001418 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001e6a:	e004      	b.n	8001e76 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	4798      	blx	r3
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b084      	sub	sp, #16
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f7ff facd 	bl	800142c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff fabd 	bl	8001440 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d108      	bne.n	8001efc <ADC_Enable+0x2c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <ADC_Enable+0x2c>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <ADC_Enable+0x2e>
 8001efc:	2300      	movs	r3, #0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d143      	bne.n	8001f8a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b22      	ldr	r3, [pc, #136]	; (8001f94 <ADC_Enable+0xc4>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00d      	beq.n	8001f2c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f043 0210 	orr.w	r2, r3, #16
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e02f      	b.n	8001f8c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001f3c:	f7ff fa3c 	bl	80013b8 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f42:	e01b      	b.n	8001f7c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f44:	f7ff fa38 	bl	80013b8 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d914      	bls.n	8001f7c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d00d      	beq.n	8001f7c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f043 0210 	orr.w	r2, r3, #16
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e007      	b.n	8001f8c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d1dc      	bne.n	8001f44 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	8000003f 	.word	0x8000003f

08001f98 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d108      	bne.n	8001fc4 <ADC_Disable+0x2c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <ADC_Disable+0x2c>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <ADC_Disable+0x2e>
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d047      	beq.n	800205a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030d 	and.w	r3, r3, #13
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d10f      	bne.n	8001ff8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0202 	orr.w	r2, r2, #2
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2203      	movs	r2, #3
 8001fee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff f9e2 	bl	80013b8 <HAL_GetTick>
 8001ff4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ff6:	e029      	b.n	800204c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f043 0210 	orr.w	r2, r3, #16
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f043 0201 	orr.w	r2, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e023      	b.n	800205c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002014:	f7ff f9d0 	bl	80013b8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d914      	bls.n	800204c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10d      	bne.n	800204c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002040:	f043 0201 	orr.w	r2, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e007      	b.n	800205c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d0dc      	beq.n	8002014 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e0ed      	b.n	8002252 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff f834 	bl	80010f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0201 	orr.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002098:	f7ff f98e 	bl	80013b8 <HAL_GetTick>
 800209c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800209e:	e012      	b.n	80020c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020a0:	f7ff f98a 	bl	80013b8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b0a      	cmp	r3, #10
 80020ac:	d90b      	bls.n	80020c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2205      	movs	r2, #5
 80020be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0c5      	b.n	8002252 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0e5      	beq.n	80020a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0202 	bic.w	r2, r2, #2
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e4:	f7ff f968 	bl	80013b8 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020ea:	e012      	b.n	8002112 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020ec:	f7ff f964 	bl	80013b8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b0a      	cmp	r3, #10
 80020f8:	d90b      	bls.n	8002112 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2205      	movs	r2, #5
 800210a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e09f      	b.n	8002252 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e5      	bne.n	80020ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7e1b      	ldrb	r3, [r3, #24]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d108      	bne.n	800213a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	e007      	b.n	800214a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002148:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	7e5b      	ldrb	r3, [r3, #25]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d108      	bne.n	8002164 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e007      	b.n	8002174 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002172:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e9b      	ldrb	r3, [r3, #26]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d108      	bne.n	800218e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0220 	orr.w	r2, r2, #32
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0220 	bic.w	r2, r2, #32
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7edb      	ldrb	r3, [r3, #27]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0210 	bic.w	r2, r2, #16
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0210 	orr.w	r2, r2, #16
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7f1b      	ldrb	r3, [r3, #28]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0208 	orr.w	r2, r2, #8
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0208 	bic.w	r2, r2, #8
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7f5b      	ldrb	r3, [r3, #29]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0204 	orr.w	r2, r2, #4
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e007      	b.n	800221c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0204 	bic.w	r2, r2, #4
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	431a      	orrs	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	ea42 0103 	orr.w	r1, r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800225a:	b480      	push	{r7}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002270:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d003      	beq.n	8002280 <HAL_CAN_ConfigFilter+0x26>
 8002278:	7cfb      	ldrb	r3, [r7, #19]
 800227a:	2b02      	cmp	r3, #2
 800227c:	f040 80aa 	bne.w	80023d4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2201      	movs	r2, #1
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	401a      	ands	r2, r3
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d123      	bne.n	8002302 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	401a      	ands	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022dc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3248      	adds	r2, #72	; 0x48
 80022e2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022f6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022f8:	6979      	ldr	r1, [r7, #20]
 80022fa:	3348      	adds	r3, #72	; 0x48
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	440b      	add	r3, r1
 8002300:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d122      	bne.n	8002350 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	431a      	orrs	r2, r3
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800232a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3248      	adds	r2, #72	; 0x48
 8002330:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002344:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002346:	6979      	ldr	r1, [r7, #20]
 8002348:	3348      	adds	r3, #72	; 0x48
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d109      	bne.n	800236c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	43db      	mvns	r3, r3
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800236a:	e007      	b.n	800237c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d109      	bne.n	8002398 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	43db      	mvns	r3, r3
 800238e:	401a      	ands	r2, r3
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002396:	e007      	b.n	80023a8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d107      	bne.n	80023c0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023c6:	f023 0201 	bic.w	r2, r3, #1
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e006      	b.n	80023e2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
  }
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	371c      	adds	r7, #28
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d12e      	bne.n	8002460 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 0201 	bic.w	r2, r2, #1
 8002418:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800241a:	f7fe ffcd 	bl	80013b8 <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002420:	e012      	b.n	8002448 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002422:	f7fe ffc9 	bl	80013b8 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b0a      	cmp	r3, #10
 800242e:	d90b      	bls.n	8002448 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002434:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2205      	movs	r2, #5
 8002440:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e012      	b.n	800246e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1e5      	bne.n	8002422 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e006      	b.n	800246e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
  }
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002476:	b480      	push	{r7}
 8002478:	b089      	sub	sp, #36	; 0x24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002494:	7ffb      	ldrb	r3, [r7, #31]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d003      	beq.n	80024a2 <HAL_CAN_AddTxMessage+0x2c>
 800249a:	7ffb      	ldrb	r3, [r7, #31]
 800249c:	2b02      	cmp	r3, #2
 800249e:	f040 80b8 	bne.w	8002612 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d10a      	bne.n	80024c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d105      	bne.n	80024c2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 80a0 	beq.w	8002602 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	0e1b      	lsrs	r3, r3, #24
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d907      	bls.n	80024e2 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e09e      	b.n	8002620 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024e2:	2201      	movs	r2, #1
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10d      	bne.n	8002510 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	6809      	ldr	r1, [r1, #0]
 8002502:	431a      	orrs	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	3318      	adds	r3, #24
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	440b      	add	r3, r1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	e00f      	b.n	8002530 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800251a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002520:	68f9      	ldr	r1, [r7, #12]
 8002522:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002524:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3318      	adds	r3, #24
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	440b      	add	r3, r1
 800252e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	3318      	adds	r3, #24
 800253c:	011b      	lsls	r3, r3, #4
 800253e:	440b      	add	r3, r1
 8002540:	3304      	adds	r3, #4
 8002542:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	7d1b      	ldrb	r3, [r3, #20]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d111      	bne.n	8002570 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3318      	adds	r3, #24
 8002554:	011b      	lsls	r3, r3, #4
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	6811      	ldr	r1, [r2, #0]
 8002560:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3318      	adds	r3, #24
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	440b      	add	r3, r1
 800256c:	3304      	adds	r3, #4
 800256e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3307      	adds	r3, #7
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	061a      	lsls	r2, r3, #24
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3306      	adds	r3, #6
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3305      	adds	r3, #5
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	4313      	orrs	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	3204      	adds	r2, #4
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	4610      	mov	r0, r2
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	6811      	ldr	r1, [r2, #0]
 8002598:	ea43 0200 	orr.w	r2, r3, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	440b      	add	r3, r1
 80025a2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3303      	adds	r3, #3
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	061a      	lsls	r2, r3, #24
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3302      	adds	r3, #2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3301      	adds	r3, #1
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	021b      	lsls	r3, r3, #8
 80025c2:	4313      	orrs	r3, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	7812      	ldrb	r2, [r2, #0]
 80025c8:	4610      	mov	r0, r2
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	6811      	ldr	r1, [r2, #0]
 80025ce:	ea43 0200 	orr.w	r2, r3, r0
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	440b      	add	r3, r1
 80025d8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3318      	adds	r3, #24
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	4413      	add	r3, r2
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	6811      	ldr	r1, [r2, #0]
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	3318      	adds	r3, #24
 80025f8:	011b      	lsls	r3, r3, #4
 80025fa:	440b      	add	r3, r1
 80025fc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	e00e      	b.n	8002620 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e006      	b.n	8002620 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3724      	adds	r7, #36	; 0x24
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800262c:	b480      	push	{r7}
 800262e:	b087      	sub	sp, #28
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002640:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d003      	beq.n	8002650 <HAL_CAN_GetRxMessage+0x24>
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b02      	cmp	r3, #2
 800264c:	f040 80f3 	bne.w	8002836 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10e      	bne.n	8002674 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d116      	bne.n	8002692 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0e7      	b.n	8002844 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0d8      	b.n	8002844 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	331b      	adds	r3, #27
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	4413      	add	r3, r2
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0204 	and.w	r2, r3, #4
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10c      	bne.n	80026ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	331b      	adds	r3, #27
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	4413      	add	r3, r2
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	0d5b      	lsrs	r3, r3, #21
 80026c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	e00b      	b.n	80026e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	331b      	adds	r3, #27
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	4413      	add	r3, r2
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	08db      	lsrs	r3, r3, #3
 80026da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	331b      	adds	r3, #27
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	4413      	add	r3, r2
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0202 	and.w	r2, r3, #2
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	331b      	adds	r3, #27
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4413      	add	r3, r2
 8002704:	3304      	adds	r3, #4
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 020f 	and.w	r2, r3, #15
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	331b      	adds	r3, #27
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4413      	add	r3, r2
 800271c:	3304      	adds	r3, #4
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b2da      	uxtb	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	331b      	adds	r3, #27
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	4413      	add	r3, r2
 8002734:	3304      	adds	r3, #4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	0c1b      	lsrs	r3, r3, #16
 800273a:	b29a      	uxth	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	011b      	lsls	r3, r3, #4
 8002748:	4413      	add	r3, r2
 800274a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b2da      	uxtb	r2, r3
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	4413      	add	r3, r2
 8002760:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0a1a      	lsrs	r2, r3, #8
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0c1a      	lsrs	r2, r3, #16
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	3302      	adds	r3, #2
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	4413      	add	r3, r2
 8002794:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e1a      	lsrs	r2, r3, #24
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	3303      	adds	r3, #3
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3304      	adds	r3, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4413      	add	r3, r2
 80027c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	0a1a      	lsrs	r2, r3, #8
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3305      	adds	r3, #5
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	4413      	add	r3, r2
 80027e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0c1a      	lsrs	r2, r3, #16
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	3306      	adds	r3, #6
 80027ec:	b2d2      	uxtb	r2, r2
 80027ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	0e1a      	lsrs	r2, r3, #24
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	3307      	adds	r3, #7
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d108      	bne.n	8002822 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	60da      	str	r2, [r3, #12]
 8002820:	e007      	b.n	8002832 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 0220 	orr.w	r2, r2, #32
 8002830:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e006      	b.n	8002844 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002860:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d002      	beq.n	800286e <HAL_CAN_ActivateNotification+0x1e>
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d109      	bne.n	8002882 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6959      	ldr	r1, [r3, #20]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e006      	b.n	8002890 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
  }
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b08a      	sub	sp, #40	; 0x28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d07c      	beq.n	80029dc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2201      	movs	r2, #1
 80028f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f983 	bl	8002c0a <HAL_CAN_TxMailbox0CompleteCallback>
 8002904:	e016      	b.n	8002934 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d004      	beq.n	800291a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
 8002918:	e00c      	b.n	8002934 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e002      	b.n	8002934 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f989 	bl	8002c46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d024      	beq.n	8002988 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002946:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f963 	bl	8002c1e <HAL_CAN_TxMailbox1CompleteCallback>
 8002958:	e016      	b.n	8002988 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
 800296c:	e00c      	b.n	8002988 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e002      	b.n	8002988 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 f969 	bl	8002c5a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d024      	beq.n	80029dc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800299a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f943 	bl	8002c32 <HAL_CAN_TxMailbox2CompleteCallback>
 80029ac:	e016      	b.n	80029dc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
 80029c0:	e00c      	b.n	80029dc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
 80029d4:	e002      	b.n	80029dc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f949 	bl	8002c6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f003 0308 	and.w	r3, r3, #8
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00c      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d007      	beq.n	8002a00 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2210      	movs	r2, #16
 80029fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00b      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 f930 	bl	8002c82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd ff76 	bl	800092c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a40:	6a3b      	ldr	r3, [r7, #32]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2210      	movs	r2, #16
 8002a62:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d006      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f912 	bl	8002caa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d009      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8f9 	bl	8002c96 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00b      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2210      	movs	r2, #16
 8002abe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f8fc 	bl	8002cbe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2208      	movs	r2, #8
 8002ae0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f8f5 	bl	8002cd2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d07b      	beq.n	8002bea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d072      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d008      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	f043 0302 	orr.w	r3, r3, #2
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	f043 0304 	orr.w	r3, r3, #4
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d043      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d03e      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b6a:	2b60      	cmp	r3, #96	; 0x60
 8002b6c:	d02b      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x32a>
 8002b6e:	2b60      	cmp	r3, #96	; 0x60
 8002b70:	d82e      	bhi.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
 8002b72:	2b50      	cmp	r3, #80	; 0x50
 8002b74:	d022      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x320>
 8002b76:	2b50      	cmp	r3, #80	; 0x50
 8002b78:	d82a      	bhi.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d019      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x316>
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	d826      	bhi.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
 8002b82:	2b30      	cmp	r3, #48	; 0x30
 8002b84:	d010      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x30c>
 8002b86:	2b30      	cmp	r3, #48	; 0x30
 8002b88:	d822      	bhi.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d002      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x2f8>
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d005      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b92:	e01d      	b.n	8002bd0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	f043 0308 	orr.w	r3, r3, #8
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b9c:	e019      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f043 0310 	orr.w	r3, r3, #16
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ba6:	e014      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f043 0320 	orr.w	r3, r3, #32
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bb0:	e00f      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bba:	e00a      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc4:	e005      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bce:	e000      	b.n	8002bd2 <HAL_CAN_IRQHandler+0x336>
            break;
 8002bd0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699a      	ldr	r2, [r3, #24]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002be0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2204      	movs	r2, #4
 8002be8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f872 	bl	8002ce6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	; 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c8a:	bf00      	nop
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cb2:	bf00      	nop
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2e:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60d3      	str	r3, [r2, #12]
}
 8002d34:	bf00      	nop
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	79fb      	ldrb	r3, [r7, #7]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <__NVIC_EnableIRQ+0x38>)
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	; (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	; (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e68:	d301      	bcc.n	8002e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <SysTick_Config+0x40>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e76:	210f      	movs	r1, #15
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7ff ff8e 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <SysTick_Config+0x40>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e86:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <SysTick_Config+0x40>)
 8002e88:	2207      	movs	r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff29 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec4:	f7ff ff3e 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	6978      	ldr	r0, [r7, #20]
 8002ed0:	f7ff ff8e 	bl	8002df0 <NVIC_EncodePriority>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff5d 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff31 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff ffa2 	bl	8002e58 <SysTick_Config>
 8002f14:	4603      	mov	r3, r0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e037      	b.n	8002fa4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f4a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f940 	bl	800320c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}  
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_DMA_Start_IT+0x20>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e04a      	b.n	8003062 <HAL_DMA_Start_IT+0xb6>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d13a      	bne.n	8003054 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	68b9      	ldr	r1, [r7, #8]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8d4 	bl	80031b0 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d008      	beq.n	8003022 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 020e 	orr.w	r2, r2, #14
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	e00f      	b.n	8003042 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 020a 	orr.w	r2, r2, #10
 8003030:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0204 	bic.w	r2, r2, #4
 8003040:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e005      	b.n	8003060 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800305c:	2302      	movs	r3, #2
 800305e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003060:	7dfb      	ldrb	r3, [r7, #23]
} 
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b084      	sub	sp, #16
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	2204      	movs	r2, #4
 8003088:	409a      	lsls	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4013      	ands	r3, r2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d024      	beq.n	80030dc <HAL_DMA_IRQHandler+0x72>
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01f      	beq.n	80030dc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0204 	bic.w	r2, r2, #4
 80030b8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	2104      	movs	r1, #4
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06a      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80030da:	e065      	b.n	80031a8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e0:	2202      	movs	r2, #2
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d02c      	beq.n	8003146 <HAL_DMA_IRQHandler+0xdc>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d027      	beq.n	8003146 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 020a 	bic.w	r2, r2, #10
 8003112:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003124:	2102      	movs	r1, #2
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	2b00      	cmp	r3, #0
 800313a:	d035      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003144:	e030      	b.n	80031a8 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2208      	movs	r2, #8
 800314c:	409a      	lsls	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d028      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x13e>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d023      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020e 	bic.w	r2, r2, #14
 800316e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f202 	lsl.w	r2, r1, r2
 800317e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2201      	movs	r2, #1
 800318a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	4798      	blx	r3
    }
  }
}  
 80031a6:	e7ff      	b.n	80031a8 <HAL_DMA_IRQHandler+0x13e>
 80031a8:	bf00      	nop
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	60b9      	str	r1, [r7, #8]
 80031ba:	607a      	str	r2, [r7, #4]
 80031bc:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	683a      	ldr	r2, [r7, #0]
 80031d4:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d108      	bne.n	80031f0 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80031ee:	e007      	b.n	8003200 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	461a      	mov	r2, r3
 800321a:	4b09      	ldr	r3, [pc, #36]	; (8003240 <DMA_CalcBaseAndBitshift+0x34>)
 800321c:	4413      	add	r3, r2
 800321e:	4a09      	ldr	r2, [pc, #36]	; (8003244 <DMA_CalcBaseAndBitshift+0x38>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	091b      	lsrs	r3, r3, #4
 8003226:	009a      	lsls	r2, r3, #2
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a06      	ldr	r2, [pc, #24]	; (8003248 <DMA_CalcBaseAndBitshift+0x3c>)
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	bffdfff8 	.word	0xbffdfff8
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	40020000 	.word	0x40020000

0800324c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325a:	e14e      	b.n	80034fa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	2101      	movs	r1, #1
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	4013      	ands	r3, r2
 800326a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 8140 	beq.w	80034f4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f003 0303 	and.w	r3, r3, #3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d005      	beq.n	800328c <HAL_GPIO_Init+0x40>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d130      	bne.n	80032ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	2203      	movs	r2, #3
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032c2:	2201      	movs	r2, #1
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4013      	ands	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	091b      	lsrs	r3, r3, #4
 80032d8:	f003 0201 	and.w	r2, r3, #1
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d017      	beq.n	800332a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	2203      	movs	r2, #3
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689a      	ldr	r2, [r3, #8]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d123      	bne.n	800337e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	08da      	lsrs	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3208      	adds	r2, #8
 800333e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	6939      	ldr	r1, [r7, #16]
 800337a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0203 	and.w	r2, r3, #3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	f000 809a 	beq.w	80034f4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c0:	4b55      	ldr	r3, [pc, #340]	; (8003518 <HAL_GPIO_Init+0x2cc>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4a54      	ldr	r2, [pc, #336]	; (8003518 <HAL_GPIO_Init+0x2cc>)
 80033c6:	f043 0301 	orr.w	r3, r3, #1
 80033ca:	6193      	str	r3, [r2, #24]
 80033cc:	4b52      	ldr	r3, [pc, #328]	; (8003518 <HAL_GPIO_Init+0x2cc>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033d8:	4a50      	ldr	r2, [pc, #320]	; (800351c <HAL_GPIO_Init+0x2d0>)
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	220f      	movs	r2, #15
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4013      	ands	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003402:	d013      	beq.n	800342c <HAL_GPIO_Init+0x1e0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a46      	ldr	r2, [pc, #280]	; (8003520 <HAL_GPIO_Init+0x2d4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00d      	beq.n	8003428 <HAL_GPIO_Init+0x1dc>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a45      	ldr	r2, [pc, #276]	; (8003524 <HAL_GPIO_Init+0x2d8>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <HAL_GPIO_Init+0x1d8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a44      	ldr	r2, [pc, #272]	; (8003528 <HAL_GPIO_Init+0x2dc>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <HAL_GPIO_Init+0x1d4>
 800341c:	2303      	movs	r3, #3
 800341e:	e006      	b.n	800342e <HAL_GPIO_Init+0x1e2>
 8003420:	2305      	movs	r3, #5
 8003422:	e004      	b.n	800342e <HAL_GPIO_Init+0x1e2>
 8003424:	2302      	movs	r3, #2
 8003426:	e002      	b.n	800342e <HAL_GPIO_Init+0x1e2>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_GPIO_Init+0x1e2>
 800342c:	2300      	movs	r3, #0
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	f002 0203 	and.w	r2, r2, #3
 8003434:	0092      	lsls	r2, r2, #2
 8003436:	4093      	lsls	r3, r2
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	4313      	orrs	r3, r2
 800343c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800343e:	4937      	ldr	r1, [pc, #220]	; (800351c <HAL_GPIO_Init+0x2d0>)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	3302      	adds	r3, #2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800344c:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_GPIO_Init+0x2e0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43db      	mvns	r3, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003470:	4a2e      	ldr	r2, [pc, #184]	; (800352c <HAL_GPIO_Init+0x2e0>)
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003476:	4b2d      	ldr	r3, [pc, #180]	; (800352c <HAL_GPIO_Init+0x2e0>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800349a:	4a24      	ldr	r2, [pc, #144]	; (800352c <HAL_GPIO_Init+0x2e0>)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <HAL_GPIO_Init+0x2e0>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4013      	ands	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d003      	beq.n	80034c4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80034c4:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_GPIO_Init+0x2e0>)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <HAL_GPIO_Init+0x2e0>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	4013      	ands	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80034ee:	4a0f      	ldr	r2, [pc, #60]	; (800352c <HAL_GPIO_Init+0x2e0>)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3301      	adds	r3, #1
 80034f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f47f aea9 	bne.w	800325c <HAL_GPIO_Init+0x10>
  }
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40021000 	.word	0x40021000
 800351c:	40010000 	.word	0x40010000
 8003520:	48000400 	.word	0x48000400
 8003524:	48000800 	.word	0x48000800
 8003528:	48000c00 	.word	0x48000c00
 800352c:	40010400 	.word	0x40010400

08003530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	887b      	ldrh	r3, [r7, #2]
 8003542:	4013      	ands	r3, r2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003548:	2301      	movs	r3, #1
 800354a:	73fb      	strb	r3, [r7, #15]
 800354c:	e001      	b.n	8003552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	807b      	strh	r3, [r7, #2]
 800356c:	4613      	mov	r3, r2
 800356e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003570:	787b      	ldrb	r3, [r7, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800357c:	e002      	b.n	8003584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003596:	af00      	add	r7, sp, #0
 8003598:	1d3b      	adds	r3, r7, #4
 800359a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800359c:	1d3b      	adds	r3, r7, #4
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f000 bef4 	b.w	8004392 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035aa:	1d3b      	adds	r3, r7, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0301 	and.w	r3, r3, #1
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 816a 	beq.w	800388e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80035ba:	4bb3      	ldr	r3, [pc, #716]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b04      	cmp	r3, #4
 80035c4:	d00c      	beq.n	80035e0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035c6:	4bb0      	ldr	r3, [pc, #704]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d159      	bne.n	8003686 <HAL_RCC_OscConfig+0xf6>
 80035d2:	4bad      	ldr	r3, [pc, #692]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035de:	d152      	bne.n	8003686 <HAL_RCC_OscConfig+0xf6>
 80035e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	fab3 f383 	clz	r3, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b01      	cmp	r3, #1
 800360a:	d102      	bne.n	8003612 <HAL_RCC_OscConfig+0x82>
 800360c:	4b9e      	ldr	r3, [pc, #632]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	e015      	b.n	800363e <HAL_RCC_OscConfig+0xae>
 8003612:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003616:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003626:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800362a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800362e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003632:	fa93 f3a3 	rbit	r3, r3
 8003636:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800363a:	4b93      	ldr	r3, [pc, #588]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003642:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003646:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800364a:	fa92 f2a2 	rbit	r2, r2
 800364e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003652:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 810c 	beq.w	800388c <HAL_RCC_OscConfig+0x2fc>
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	f040 8106 	bne.w	800388c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f000 be86 	b.w	8004392 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003686:	1d3b      	adds	r3, r7, #4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003690:	d106      	bne.n	80036a0 <HAL_RCC_OscConfig+0x110>
 8003692:	4b7d      	ldr	r3, [pc, #500]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a7c      	ldr	r2, [pc, #496]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 8003698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	e030      	b.n	8003702 <HAL_RCC_OscConfig+0x172>
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x134>
 80036aa:	4b77      	ldr	r3, [pc, #476]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a76      	ldr	r2, [pc, #472]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b74      	ldr	r3, [pc, #464]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a73      	ldr	r2, [pc, #460]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e01e      	b.n	8003702 <HAL_RCC_OscConfig+0x172>
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ce:	d10c      	bne.n	80036ea <HAL_RCC_OscConfig+0x15a>
 80036d0:	4b6d      	ldr	r3, [pc, #436]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a6c      	ldr	r2, [pc, #432]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b6a      	ldr	r3, [pc, #424]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a69      	ldr	r2, [pc, #420]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e00b      	b.n	8003702 <HAL_RCC_OscConfig+0x172>
 80036ea:	4b67      	ldr	r3, [pc, #412]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a66      	ldr	r2, [pc, #408]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	4b64      	ldr	r3, [pc, #400]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a63      	ldr	r2, [pc, #396]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 80036fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003702:	4b61      	ldr	r3, [pc, #388]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	f023 020f 	bic.w	r2, r3, #15
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	495d      	ldr	r1, [pc, #372]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 8003712:	4313      	orrs	r3, r2
 8003714:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d059      	beq.n	80037d4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fd fe4a 	bl	80013b8 <HAL_GetTick>
 8003724:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800372a:	f7fd fe45 	bl	80013b8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b64      	cmp	r3, #100	; 0x64
 8003738:	d902      	bls.n	8003740 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	f000 be29 	b.w	8004392 <HAL_RCC_OscConfig+0xe02>
 8003740:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003744:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003748:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800374c:	fa93 f3a3 	rbit	r3, r3
 8003750:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003754:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	b2db      	uxtb	r3, r3
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_RCC_OscConfig+0x1e2>
 800376c:	4b46      	ldr	r3, [pc, #280]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	e015      	b.n	800379e <HAL_RCC_OscConfig+0x20e>
 8003772:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003776:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800377e:	fa93 f3a3 	rbit	r3, r3
 8003782:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003786:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800378a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800378e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003792:	fa93 f3a3 	rbit	r3, r3
 8003796:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800379a:	4b3b      	ldr	r3, [pc, #236]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 800379c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037a2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80037a6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80037aa:	fa92 f2a2 	rbit	r2, r2
 80037ae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80037b2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80037b6:	fab2 f282 	clz	r2, r2
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	f042 0220 	orr.w	r2, r2, #32
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	f002 021f 	and.w	r2, r2, #31
 80037c6:	2101      	movs	r1, #1
 80037c8:	fa01 f202 	lsl.w	r2, r1, r2
 80037cc:	4013      	ands	r3, r2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ab      	beq.n	800372a <HAL_RCC_OscConfig+0x19a>
 80037d2:	e05c      	b.n	800388e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d4:	f7fd fdf0 	bl	80013b8 <HAL_GetTick>
 80037d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037dc:	e00a      	b.n	80037f4 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037de:	f7fd fdeb 	bl	80013b8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	; 0x64
 80037ec:	d902      	bls.n	80037f4 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	f000 bdcf 	b.w	8004392 <HAL_RCC_OscConfig+0xe02>
 80037f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037f8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003808:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380c:	fab3 f383 	clz	r3, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	b2db      	uxtb	r3, r3
 8003816:	f043 0301 	orr.w	r3, r3, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	d102      	bne.n	8003826 <HAL_RCC_OscConfig+0x296>
 8003820:	4b19      	ldr	r3, [pc, #100]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	e015      	b.n	8003852 <HAL_RCC_OscConfig+0x2c2>
 8003826:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800382a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003832:	fa93 f3a3 	rbit	r3, r3
 8003836:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800383a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800383e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003842:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003846:	fa93 f3a3 	rbit	r3, r3
 800384a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_RCC_OscConfig+0x2f8>)
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003856:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800385a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800385e:	fa92 f2a2 	rbit	r2, r2
 8003862:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003866:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800386a:	fab2 f282 	clz	r2, r2
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	f042 0220 	orr.w	r2, r2, #32
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f002 021f 	and.w	r2, r2, #31
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1ab      	bne.n	80037de <HAL_RCC_OscConfig+0x24e>
 8003886:	e002      	b.n	800388e <HAL_RCC_OscConfig+0x2fe>
 8003888:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388e:	1d3b      	adds	r3, r7, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 816f 	beq.w	8003b7c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800389e:	4bd0      	ldr	r3, [pc, #832]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038aa:	4bcd      	ldr	r3, [pc, #820]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d16c      	bne.n	8003990 <HAL_RCC_OscConfig+0x400>
 80038b6:	4bca      	ldr	r3, [pc, #808]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d166      	bne.n	8003990 <HAL_RCC_OscConfig+0x400>
 80038c2:	2302      	movs	r3, #2
 80038c4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80038cc:	fa93 f3a3 	rbit	r3, r3
 80038d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80038d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d8:	fab3 f383 	clz	r3, r3
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f043 0301 	orr.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d102      	bne.n	80038f2 <HAL_RCC_OscConfig+0x362>
 80038ec:	4bbc      	ldr	r3, [pc, #752]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	e013      	b.n	800391a <HAL_RCC_OscConfig+0x38a>
 80038f2:	2302      	movs	r3, #2
 80038f4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80038fc:	fa93 f3a3 	rbit	r3, r3
 8003900:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003904:	2302      	movs	r3, #2
 8003906:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800390a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003916:	4bb2      	ldr	r3, [pc, #712]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2202      	movs	r2, #2
 800391c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003920:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800392c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003930:	fab2 f282 	clz	r2, r2
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	f042 0220 	orr.w	r2, r2, #32
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	f002 021f 	and.w	r2, r2, #31
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f202 	lsl.w	r2, r1, r2
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d007      	beq.n	800395c <HAL_RCC_OscConfig+0x3cc>
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d002      	beq.n	800395c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f000 bd1b 	b.w	8004392 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395c:	4ba0      	ldr	r3, [pc, #640]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	21f8      	movs	r1, #248	; 0xf8
 800396c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003970:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003974:	fa91 f1a1 	rbit	r1, r1
 8003978:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800397c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003980:	fab1 f181 	clz	r1, r1
 8003984:	b2c9      	uxtb	r1, r1
 8003986:	408b      	lsls	r3, r1
 8003988:	4995      	ldr	r1, [pc, #596]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398e:	e0f5      	b.n	8003b7c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003990:	1d3b      	adds	r3, r7, #4
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8085 	beq.w	8003aa6 <HAL_RCC_OscConfig+0x516>
 800399c:	2301      	movs	r3, #1
 800399e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80039a6:	fa93 f3a3 	rbit	r3, r3
 80039aa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80039ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039b2:	fab3 f383 	clz	r3, r3
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	461a      	mov	r2, r3
 80039c4:	2301      	movs	r3, #1
 80039c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c8:	f7fd fcf6 	bl	80013b8 <HAL_GetTick>
 80039cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d2:	f7fd fcf1 	bl	80013b8 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	f000 bcd5 	b.w	8004392 <HAL_RCC_OscConfig+0xe02>
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80039f2:	fa93 f3a3 	rbit	r3, r3
 80039f6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80039fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d102      	bne.n	8003a18 <HAL_RCC_OscConfig+0x488>
 8003a12:	4b73      	ldr	r3, [pc, #460]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	e013      	b.n	8003a40 <HAL_RCC_OscConfig+0x4b0>
 8003a18:	2302      	movs	r3, #2
 8003a1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003a22:	fa93 f3a3 	rbit	r3, r3
 8003a26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a30:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003a34:	fa93 f3a3 	rbit	r3, r3
 8003a38:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2202      	movs	r2, #2
 8003a42:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003a46:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a4a:	fa92 f2a2 	rbit	r2, r2
 8003a4e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003a52:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003a56:	fab2 f282 	clz	r2, r2
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f042 0220 	orr.w	r2, r2, #32
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	f002 021f 	and.w	r2, r2, #31
 8003a66:	2101      	movs	r1, #1
 8003a68:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0af      	beq.n	80039d2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a72:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a7a:	1d3b      	adds	r3, r7, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	21f8      	movs	r1, #248	; 0xf8
 8003a82:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a86:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003a8a:	fa91 f1a1 	rbit	r1, r1
 8003a8e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003a92:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003a96:	fab1 f181 	clz	r1, r1
 8003a9a:	b2c9      	uxtb	r1, r1
 8003a9c:	408b      	lsls	r3, r1
 8003a9e:	4950      	ldr	r1, [pc, #320]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	600b      	str	r3, [r1, #0]
 8003aa4:	e06a      	b.n	8003b7c <HAL_RCC_OscConfig+0x5ec>
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003ab0:	fa93 f3a3 	rbit	r3, r3
 8003ab4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003ab8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abc:	fab3 f383 	clz	r3, r3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ac6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	461a      	mov	r2, r3
 8003ace:	2300      	movs	r3, #0
 8003ad0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad2:	f7fd fc71 	bl	80013b8 <HAL_GetTick>
 8003ad6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003adc:	f7fd fc6c 	bl	80013b8 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d902      	bls.n	8003af2 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	f000 bc50 	b.w	8004392 <HAL_RCC_OscConfig+0xe02>
 8003af2:	2302      	movs	r3, #2
 8003af4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003afc:	fa93 f3a3 	rbit	r3, r3
 8003b00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b08:	fab3 f383 	clz	r3, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d102      	bne.n	8003b22 <HAL_RCC_OscConfig+0x592>
 8003b1c:	4b30      	ldr	r3, [pc, #192]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	e013      	b.n	8003b4a <HAL_RCC_OscConfig+0x5ba>
 8003b22:	2302      	movs	r3, #2
 8003b24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b2c:	fa93 f3a3 	rbit	r3, r3
 8003b30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b34:	2302      	movs	r3, #2
 8003b36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003b46:	4b26      	ldr	r3, [pc, #152]	; (8003be0 <HAL_RCC_OscConfig+0x650>)
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003b50:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003b54:	fa92 f2a2 	rbit	r2, r2
 8003b58:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003b5c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003b60:	fab2 f282 	clz	r2, r2
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	f042 0220 	orr.w	r2, r2, #32
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	f002 021f 	and.w	r2, r2, #31
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f202 	lsl.w	r2, r1, r2
 8003b76:	4013      	ands	r3, r2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1af      	bne.n	8003adc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7c:	1d3b      	adds	r3, r7, #4
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 80da 	beq.w	8003d40 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d069      	beq.n	8003c6a <HAL_RCC_OscConfig+0x6da>
 8003b96:	2301      	movs	r3, #1
 8003b98:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ba0:	fa93 f3a3 	rbit	r3, r3
 8003ba4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bac:	fab3 f383 	clz	r3, r3
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_OscConfig+0x654>)
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc0:	f7fd fbfa 	bl	80013b8 <HAL_GetTick>
 8003bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc8:	e00e      	b.n	8003be8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bca:	f7fd fbf5 	bl	80013b8 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d906      	bls.n	8003be8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e3d9      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	10908120 	.word	0x10908120
 8003be8:	2302      	movs	r3, #2
 8003bea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003bf2:	fa93 f3a3 	rbit	r3, r3
 8003bf6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003bfa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003bfe:	2202      	movs	r2, #2
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	fa93 f2a3 	rbit	r2, r3
 8003c0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c16:	2202      	movs	r2, #2
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	fa93 f2a3 	rbit	r2, r3
 8003c24:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003c28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	4ba5      	ldr	r3, [pc, #660]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c2e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c32:	2102      	movs	r1, #2
 8003c34:	6019      	str	r1, [r3, #0]
 8003c36:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	fa93 f1a3 	rbit	r1, r3
 8003c40:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c44:	6019      	str	r1, [r3, #0]
  return result;
 8003c46:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0b0      	beq.n	8003bca <HAL_RCC_OscConfig+0x63a>
 8003c68:	e06a      	b.n	8003d40 <HAL_RCC_OscConfig+0x7b0>
 8003c6a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c72:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	fa93 f2a3 	rbit	r2, r3
 8003c7c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c80:	601a      	str	r2, [r3, #0]
  return result;
 8003c82:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c86:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c88:	fab3 f383 	clz	r3, r3
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b8c      	ldr	r3, [pc, #560]	; (8003ec4 <HAL_RCC_OscConfig+0x934>)
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	461a      	mov	r2, r3
 8003c98:	2300      	movs	r3, #0
 8003c9a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9c:	f7fd fb8c 	bl	80013b8 <HAL_GetTick>
 8003ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	e009      	b.n	8003cba <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca6:	f7fd fb87 	bl	80013b8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e36b      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
 8003cba:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	fa93 f2a3 	rbit	r2, r3
 8003ccc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	fa93 f2a3 	rbit	r2, r3
 8003ce4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ce8:	601a      	str	r2, [r3, #0]
 8003cea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003cee:	2202      	movs	r2, #2
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	fa93 f2a3 	rbit	r2, r3
 8003cfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d00:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d02:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	6019      	str	r1, [r3, #0]
 8003d0e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	fa93 f1a3 	rbit	r1, r3
 8003d18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d1c:	6019      	str	r1, [r3, #0]
  return result;
 8003d1e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fab3 f383 	clz	r3, r3
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f303 	lsl.w	r3, r1, r3
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1b2      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d40:	1d3b      	adds	r3, r7, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8158 	beq.w	8004000 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d112      	bne.n	8003d88 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4b57      	ldr	r3, [pc, #348]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6c:	61d3      	str	r3, [r2, #28]
 8003d6e:	4b54      	ldr	r3, [pc, #336]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003d76:	f107 0308 	add.w	r3, r7, #8
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d88:	4b4f      	ldr	r3, [pc, #316]	; (8003ec8 <HAL_RCC_OscConfig+0x938>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d11a      	bne.n	8003dca <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d94:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <HAL_RCC_OscConfig+0x938>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a4b      	ldr	r2, [pc, #300]	; (8003ec8 <HAL_RCC_OscConfig+0x938>)
 8003d9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da0:	f7fd fb0a 	bl	80013b8 <HAL_GetTick>
 8003da4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	e009      	b.n	8003dbe <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fd fb05 	bl	80013b8 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e2e9      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dbe:	4b42      	ldr	r3, [pc, #264]	; (8003ec8 <HAL_RCC_OscConfig+0x938>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0ef      	beq.n	8003daa <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dca:	1d3b      	adds	r3, r7, #4
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCC_OscConfig+0x852>
 8003dd4:	4b3a      	ldr	r3, [pc, #232]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	4a39      	ldr	r2, [pc, #228]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003dda:	f043 0301 	orr.w	r3, r3, #1
 8003dde:	6213      	str	r3, [r2, #32]
 8003de0:	e02f      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10c      	bne.n	8003e06 <HAL_RCC_OscConfig+0x876>
 8003dec:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4a33      	ldr	r2, [pc, #204]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003df2:	f023 0301 	bic.w	r3, r3, #1
 8003df6:	6213      	str	r3, [r2, #32]
 8003df8:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003dfe:	f023 0304 	bic.w	r3, r3, #4
 8003e02:	6213      	str	r3, [r2, #32]
 8003e04:	e01d      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
 8003e06:	1d3b      	adds	r3, r7, #4
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b05      	cmp	r3, #5
 8003e0e:	d10c      	bne.n	8003e2a <HAL_RCC_OscConfig+0x89a>
 8003e10:	4b2b      	ldr	r3, [pc, #172]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003e16:	f043 0304 	orr.w	r3, r3, #4
 8003e1a:	6213      	str	r3, [r2, #32]
 8003e1c:	4b28      	ldr	r3, [pc, #160]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003e22:	f043 0301 	orr.w	r3, r3, #1
 8003e26:	6213      	str	r3, [r2, #32]
 8003e28:	e00b      	b.n	8003e42 <HAL_RCC_OscConfig+0x8b2>
 8003e2a:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003e30:	f023 0301 	bic.w	r3, r3, #1
 8003e34:	6213      	str	r3, [r2, #32]
 8003e36:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	4a21      	ldr	r2, [pc, #132]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003e3c:	f023 0304 	bic.w	r3, r3, #4
 8003e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e42:	1d3b      	adds	r3, r7, #4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d06b      	beq.n	8003f24 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4c:	f7fd fab4 	bl	80013b8 <HAL_GetTick>
 8003e50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00b      	b.n	8003e6e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd faaf 	bl	80013b8 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e291      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
 8003e6e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e72:	2202      	movs	r2, #2
 8003e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	fa93 f2a3 	rbit	r2, r3
 8003e80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	fa93 f2a3 	rbit	r2, r3
 8003e98:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e9c:	601a      	str	r2, [r3, #0]
  return result;
 8003e9e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003ea2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea4:	fab3 f383 	clz	r3, r3
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	095b      	lsrs	r3, r3, #5
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	f043 0302 	orr.w	r3, r3, #2
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCC_OscConfig+0x93c>
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <HAL_RCC_OscConfig+0x930>)
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	e014      	b.n	8003ee8 <HAL_RCC_OscConfig+0x958>
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	10908120 	.word	0x10908120
 8003ec8:	40007000 	.word	0x40007000
 8003ecc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	fa93 f2a3 	rbit	r2, r3
 8003ede:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	4bbb      	ldr	r3, [pc, #748]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003eec:	2102      	movs	r1, #2
 8003eee:	6011      	str	r1, [r2, #0]
 8003ef0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003ef4:	6812      	ldr	r2, [r2, #0]
 8003ef6:	fa92 f1a2 	rbit	r1, r2
 8003efa:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003efe:	6011      	str	r1, [r2, #0]
  return result;
 8003f00:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	fab2 f282 	clz	r2, r2
 8003f0a:	b2d2      	uxtb	r2, r2
 8003f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	f002 021f 	and.w	r2, r2, #31
 8003f16:	2101      	movs	r1, #1
 8003f18:	fa01 f202 	lsl.w	r2, r1, r2
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d099      	beq.n	8003e56 <HAL_RCC_OscConfig+0x8c6>
 8003f22:	e063      	b.n	8003fec <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f24:	f7fd fa48 	bl	80013b8 <HAL_GetTick>
 8003f28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f2c:	e00b      	b.n	8003f46 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2e:	f7fd fa43 	bl	80013b8 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e225      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
 8003f46:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	fa93 f2a3 	rbit	r2, r3
 8003f58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f62:	2202      	movs	r2, #2
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	fa93 f2a3 	rbit	r2, r3
 8003f70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f74:	601a      	str	r2, [r3, #0]
  return result;
 8003f76:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003f7a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7c:	fab3 f383 	clz	r3, r3
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f043 0302 	orr.w	r3, r3, #2
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d102      	bne.n	8003f96 <HAL_RCC_OscConfig+0xa06>
 8003f90:	4b90      	ldr	r3, [pc, #576]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	e00d      	b.n	8003fb2 <HAL_RCC_OscConfig+0xa22>
 8003f96:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	fa93 f2a3 	rbit	r2, r3
 8003fa8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003fb6:	2102      	movs	r1, #2
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003fbe:	6812      	ldr	r2, [r2, #0]
 8003fc0:	fa92 f1a2 	rbit	r1, r2
 8003fc4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003fc8:	6011      	str	r1, [r2, #0]
  return result;
 8003fca:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003fce:	6812      	ldr	r2, [r2, #0]
 8003fd0:	fab2 f282 	clz	r2, r2
 8003fd4:	b2d2      	uxtb	r2, r2
 8003fd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	f002 021f 	and.w	r2, r2, #31
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1a0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003fec:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d105      	bne.n	8004000 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4b77      	ldr	r3, [pc, #476]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4a76      	ldr	r2, [pc, #472]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 8003ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ffe:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004000:	1d3b      	adds	r3, r7, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 81c2 	beq.w	8004390 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400c:	4b71      	ldr	r3, [pc, #452]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f003 030c 	and.w	r3, r3, #12
 8004014:	2b08      	cmp	r3, #8
 8004016:	f000 819c 	beq.w	8004352 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b02      	cmp	r3, #2
 8004022:	f040 8114 	bne.w	800424e <HAL_RCC_OscConfig+0xcbe>
 8004026:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800402a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800402e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004030:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	fa93 f2a3 	rbit	r2, r3
 800403a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800403e:	601a      	str	r2, [r3, #0]
  return result;
 8004040:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004044:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	fab3 f383 	clz	r3, r3
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004050:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	461a      	mov	r2, r3
 8004058:	2300      	movs	r3, #0
 800405a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405c:	f7fd f9ac 	bl	80013b8 <HAL_GetTick>
 8004060:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004064:	e009      	b.n	800407a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004066:	f7fd f9a7 	bl	80013b8 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e18b      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
 800407a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800407e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004082:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	fa93 f2a3 	rbit	r2, r3
 800408e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004092:	601a      	str	r2, [r3, #0]
  return result;
 8004094:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004098:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	095b      	lsrs	r3, r3, #5
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_OscConfig+0xb24>
 80040ae:	4b49      	ldr	r3, [pc, #292]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	e01b      	b.n	80040ec <HAL_RCC_OscConfig+0xb5c>
 80040b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	fa93 f2a3 	rbit	r2, r3
 80040c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	fa93 f2a3 	rbit	r2, r3
 80040e2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	4b3a      	ldr	r3, [pc, #232]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040f0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040f4:	6011      	str	r1, [r2, #0]
 80040f6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	fa92 f1a2 	rbit	r1, r2
 8004100:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004104:	6011      	str	r1, [r2, #0]
  return result;
 8004106:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	fab2 f282 	clz	r2, r2
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	f042 0220 	orr.w	r2, r2, #32
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	f002 021f 	and.w	r2, r2, #31
 800411c:	2101      	movs	r1, #1
 800411e:	fa01 f202 	lsl.w	r2, r1, r2
 8004122:	4013      	ands	r3, r2
 8004124:	2b00      	cmp	r3, #0
 8004126:	d19e      	bne.n	8004066 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004128:	4b2a      	ldr	r3, [pc, #168]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004130:	1d3b      	adds	r3, r7, #4
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004136:	1d3b      	adds	r3, r7, #4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	430b      	orrs	r3, r1
 800413e:	4925      	ldr	r1, [pc, #148]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
 8004144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004148:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800414c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	fa93 f2a3 	rbit	r2, r3
 8004158:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800415c:	601a      	str	r2, [r3, #0]
  return result;
 800415e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004162:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800416e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	461a      	mov	r2, r3
 8004176:	2301      	movs	r3, #1
 8004178:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7fd f91d 	bl	80013b8 <HAL_GetTick>
 800417e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004182:	e009      	b.n	8004198 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004184:	f7fd f918 	bl	80013b8 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e0fc      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
 8004198:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800419c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	fa93 f2a3 	rbit	r2, r3
 80041ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041b0:	601a      	str	r2, [r3, #0]
  return result;
 80041b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041b6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b8:	fab3 f383 	clz	r3, r3
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d105      	bne.n	80041d8 <HAL_RCC_OscConfig+0xc48>
 80041cc:	4b01      	ldr	r3, [pc, #4]	; (80041d4 <HAL_RCC_OscConfig+0xc44>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	e01e      	b.n	8004210 <HAL_RCC_OscConfig+0xc80>
 80041d2:	bf00      	nop
 80041d4:	40021000 	.word	0x40021000
 80041d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	fa93 f2a3 	rbit	r2, r3
 80041ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	fa93 f2a3 	rbit	r2, r3
 8004206:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	4b63      	ldr	r3, [pc, #396]	; (800439c <HAL_RCC_OscConfig+0xe0c>)
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004214:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004218:	6011      	str	r1, [r2, #0]
 800421a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800421e:	6812      	ldr	r2, [r2, #0]
 8004220:	fa92 f1a2 	rbit	r1, r2
 8004224:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004228:	6011      	str	r1, [r2, #0]
  return result;
 800422a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	fab2 f282 	clz	r2, r2
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	f042 0220 	orr.w	r2, r2, #32
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	f002 021f 	and.w	r2, r2, #31
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f202 	lsl.w	r2, r1, r2
 8004246:	4013      	ands	r3, r2
 8004248:	2b00      	cmp	r3, #0
 800424a:	d09b      	beq.n	8004184 <HAL_RCC_OscConfig+0xbf4>
 800424c:	e0a0      	b.n	8004390 <HAL_RCC_OscConfig+0xe00>
 800424e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004252:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004256:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	fa93 f2a3 	rbit	r2, r3
 8004262:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004266:	601a      	str	r2, [r3, #0]
  return result;
 8004268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800426c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800426e:	fab3 f383 	clz	r3, r3
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004278:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	461a      	mov	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fd f898 	bl	80013b8 <HAL_GetTick>
 8004288:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800428c:	e009      	b.n	80042a2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800428e:	f7fd f893 	bl	80013b8 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	2b02      	cmp	r3, #2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e077      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
 80042a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	fa93 f2a3 	rbit	r2, r3
 80042b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042ba:	601a      	str	r2, [r3, #0]
  return result;
 80042bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c2:	fab3 f383 	clz	r3, r3
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	095b      	lsrs	r3, r3, #5
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d102      	bne.n	80042dc <HAL_RCC_OscConfig+0xd4c>
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <HAL_RCC_OscConfig+0xe0c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	e01b      	b.n	8004314 <HAL_RCC_OscConfig+0xd84>
 80042dc:	f107 0320 	add.w	r3, r7, #32
 80042e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f107 0320 	add.w	r3, r7, #32
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	fa93 f2a3 	rbit	r2, r3
 80042f0:	f107 031c 	add.w	r3, r7, #28
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	f107 0318 	add.w	r3, r7, #24
 80042fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	f107 0318 	add.w	r3, r7, #24
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	fa93 f2a3 	rbit	r2, r3
 800430a:	f107 0314 	add.w	r3, r7, #20
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	4b22      	ldr	r3, [pc, #136]	; (800439c <HAL_RCC_OscConfig+0xe0c>)
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	f107 0210 	add.w	r2, r7, #16
 8004318:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800431c:	6011      	str	r1, [r2, #0]
 800431e:	f107 0210 	add.w	r2, r7, #16
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	fa92 f1a2 	rbit	r1, r2
 8004328:	f107 020c 	add.w	r2, r7, #12
 800432c:	6011      	str	r1, [r2, #0]
  return result;
 800432e:	f107 020c 	add.w	r2, r7, #12
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	fab2 f282 	clz	r2, r2
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	f042 0220 	orr.w	r2, r2, #32
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	f002 021f 	and.w	r2, r2, #31
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f202 	lsl.w	r2, r1, r2
 800434a:	4013      	ands	r3, r2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d19e      	bne.n	800428e <HAL_RCC_OscConfig+0xcfe>
 8004350:	e01e      	b.n	8004390 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e018      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_RCC_OscConfig+0xe0c>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004368:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800436c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	429a      	cmp	r2, r3
 8004378:	d108      	bne.n	800438c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800437a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800437e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004382:	1d3b      	adds	r3, r7, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40021000 	.word	0x40021000

080043a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b09e      	sub	sp, #120	; 0x78
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e162      	b.n	800467e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b8:	4b90      	ldr	r3, [pc, #576]	; (80045fc <HAL_RCC_ClockConfig+0x25c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d910      	bls.n	80043e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c6:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <HAL_RCC_ClockConfig+0x25c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 0207 	bic.w	r2, r3, #7
 80043ce:	498b      	ldr	r1, [pc, #556]	; (80045fc <HAL_RCC_ClockConfig+0x25c>)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d6:	4b89      	ldr	r3, [pc, #548]	; (80045fc <HAL_RCC_ClockConfig+0x25c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d001      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e14a      	b.n	800467e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f4:	4b82      	ldr	r3, [pc, #520]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	497f      	ldr	r1, [pc, #508]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 8004402:	4313      	orrs	r3, r2
 8004404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 80dc 	beq.w	80045cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d13c      	bne.n	8004496 <HAL_RCC_ClockConfig+0xf6>
 800441c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004420:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004424:	fa93 f3a3 	rbit	r3, r3
 8004428:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800442a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442c:	fab3 f383 	clz	r3, r3
 8004430:	b2db      	uxtb	r3, r3
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	d102      	bne.n	8004446 <HAL_RCC_ClockConfig+0xa6>
 8004440:	4b6f      	ldr	r3, [pc, #444]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	e00f      	b.n	8004466 <HAL_RCC_ClockConfig+0xc6>
 8004446:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800444a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	667b      	str	r3, [r7, #100]	; 0x64
 8004454:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004458:	663b      	str	r3, [r7, #96]	; 0x60
 800445a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800445c:	fa93 f3a3 	rbit	r3, r3
 8004460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004462:	4b67      	ldr	r3, [pc, #412]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800446a:	65ba      	str	r2, [r7, #88]	; 0x58
 800446c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800446e:	fa92 f2a2 	rbit	r2, r2
 8004472:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004474:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004476:	fab2 f282 	clz	r2, r2
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f042 0220 	orr.w	r2, r2, #32
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	f002 021f 	and.w	r2, r2, #31
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d17b      	bne.n	800458a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e0f3      	b.n	800467e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d13c      	bne.n	8004518 <HAL_RCC_ClockConfig+0x178>
 800449e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f043 0301 	orr.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d102      	bne.n	80044c8 <HAL_RCC_ClockConfig+0x128>
 80044c2:	4b4f      	ldr	r3, [pc, #316]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	e00f      	b.n	80044e8 <HAL_RCC_ClockConfig+0x148>
 80044c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044cc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d0:	fa93 f3a3 	rbit	r3, r3
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
 80044d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044da:	643b      	str	r3, [r7, #64]	; 0x40
 80044dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044de:	fa93 f3a3 	rbit	r3, r3
 80044e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e4:	4b46      	ldr	r3, [pc, #280]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80044ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044f0:	fa92 f2a2 	rbit	r2, r2
 80044f4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80044f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044f8:	fab2 f282 	clz	r2, r2
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	f042 0220 	orr.w	r2, r2, #32
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	f002 021f 	and.w	r2, r2, #31
 8004508:	2101      	movs	r1, #1
 800450a:	fa01 f202 	lsl.w	r2, r1, r2
 800450e:	4013      	ands	r3, r2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d13a      	bne.n	800458a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b2      	b.n	800467e <HAL_RCC_ClockConfig+0x2de>
 8004518:	2302      	movs	r3, #2
 800451a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	fa93 f3a3 	rbit	r3, r3
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d102      	bne.n	8004540 <HAL_RCC_ClockConfig+0x1a0>
 800453a:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	e00d      	b.n	800455c <HAL_RCC_ClockConfig+0x1bc>
 8004540:	2302      	movs	r3, #2
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
 800454c:	2302      	movs	r3, #2
 800454e:	623b      	str	r3, [r7, #32]
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	fa93 f3a3 	rbit	r3, r3
 8004556:	61fb      	str	r3, [r7, #28]
 8004558:	4b29      	ldr	r3, [pc, #164]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	2202      	movs	r2, #2
 800455e:	61ba      	str	r2, [r7, #24]
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	fa92 f2a2 	rbit	r2, r2
 8004566:	617a      	str	r2, [r7, #20]
  return result;
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	fab2 f282 	clz	r2, r2
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	f042 0220 	orr.w	r2, r2, #32
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	f002 021f 	and.w	r2, r2, #31
 800457a:	2101      	movs	r1, #1
 800457c:	fa01 f202 	lsl.w	r2, r1, r2
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d101      	bne.n	800458a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e079      	b.n	800467e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458a:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f023 0203 	bic.w	r2, r3, #3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	491a      	ldr	r1, [pc, #104]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800459c:	f7fc ff0c 	bl	80013b8 <HAL_GetTick>
 80045a0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a4:	f7fc ff08 	bl	80013b8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e061      	b.n	800467e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ba:	4b11      	ldr	r3, [pc, #68]	; (8004600 <HAL_RCC_ClockConfig+0x260>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 020c 	and.w	r2, r3, #12
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d1eb      	bne.n	80045a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCC_ClockConfig+0x25c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d214      	bcs.n	8004604 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCC_ClockConfig+0x25c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 0207 	bic.w	r2, r3, #7
 80045e2:	4906      	ldr	r1, [pc, #24]	; (80045fc <HAL_RCC_ClockConfig+0x25c>)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <HAL_RCC_ClockConfig+0x25c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d005      	beq.n	8004604 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e040      	b.n	800467e <HAL_RCC_ClockConfig+0x2de>
 80045fc:	40022000 	.word	0x40022000
 8004600:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0304 	and.w	r3, r3, #4
 800460c:	2b00      	cmp	r3, #0
 800460e:	d008      	beq.n	8004622 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <HAL_RCC_ClockConfig+0x2e8>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	491a      	ldr	r1, [pc, #104]	; (8004688 <HAL_RCC_ClockConfig+0x2e8>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800462e:	4b16      	ldr	r3, [pc, #88]	; (8004688 <HAL_RCC_ClockConfig+0x2e8>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4912      	ldr	r1, [pc, #72]	; (8004688 <HAL_RCC_ClockConfig+0x2e8>)
 800463e:	4313      	orrs	r3, r2
 8004640:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004642:	f000 f829 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004646:	4601      	mov	r1, r0
 8004648:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <HAL_RCC_ClockConfig+0x2e8>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004650:	22f0      	movs	r2, #240	; 0xf0
 8004652:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	fa92 f2a2 	rbit	r2, r2
 800465a:	60fa      	str	r2, [r7, #12]
  return result;
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	fab2 f282 	clz	r2, r2
 8004662:	b2d2      	uxtb	r2, r2
 8004664:	40d3      	lsrs	r3, r2
 8004666:	4a09      	ldr	r2, [pc, #36]	; (800468c <HAL_RCC_ClockConfig+0x2ec>)
 8004668:	5cd3      	ldrb	r3, [r2, r3]
 800466a:	fa21 f303 	lsr.w	r3, r1, r3
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <HAL_RCC_ClockConfig+0x2f0>)
 8004670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004672:	4b08      	ldr	r3, [pc, #32]	; (8004694 <HAL_RCC_ClockConfig+0x2f4>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4618      	mov	r0, r3
 8004678:	f7fc fe5a 	bl	8001330 <HAL_InitTick>
  
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3778      	adds	r7, #120	; 0x78
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	08005218 	.word	0x08005218
 8004690:	20000000 	.word	0x20000000
 8004694:	20000004 	.word	0x20000004

08004698 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004698:	b480      	push	{r7}
 800469a:	b08b      	sub	sp, #44	; 0x2c
 800469c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80046b2:	4b29      	ldr	r3, [pc, #164]	; (8004758 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d002      	beq.n	80046c8 <HAL_RCC_GetSysClockFreq+0x30>
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d003      	beq.n	80046ce <HAL_RCC_GetSysClockFreq+0x36>
 80046c6:	e03c      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046c8:	4b24      	ldr	r3, [pc, #144]	; (800475c <HAL_RCC_GetSysClockFreq+0xc4>)
 80046ca:	623b      	str	r3, [r7, #32]
      break;
 80046cc:	e03c      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80046d4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80046d8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	fa92 f2a2 	rbit	r2, r2
 80046e0:	607a      	str	r2, [r7, #4]
  return result;
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	fab2 f282 	clz	r2, r2
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	40d3      	lsrs	r3, r2
 80046ec:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_RCC_GetSysClockFreq+0xc8>)
 80046ee:	5cd3      	ldrb	r3, [r2, r3]
 80046f0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046f2:	4b19      	ldr	r3, [pc, #100]	; (8004758 <HAL_RCC_GetSysClockFreq+0xc0>)
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	220f      	movs	r2, #15
 80046fc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	fa92 f2a2 	rbit	r2, r2
 8004704:	60fa      	str	r2, [r7, #12]
  return result;
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	fab2 f282 	clz	r2, r2
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	40d3      	lsrs	r3, r2
 8004710:	4a14      	ldr	r2, [pc, #80]	; (8004764 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004712:	5cd3      	ldrb	r3, [r2, r3]
 8004714:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004720:	4a0e      	ldr	r2, [pc, #56]	; (800475c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	fbb2 f2f3 	udiv	r2, r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
 8004730:	e004      	b.n	800473c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4a0c      	ldr	r2, [pc, #48]	; (8004768 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	623b      	str	r3, [r7, #32]
      break;
 8004740:	e002      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004744:	623b      	str	r3, [r7, #32]
      break;
 8004746:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004748:	6a3b      	ldr	r3, [r7, #32]
}
 800474a:	4618      	mov	r0, r3
 800474c:	372c      	adds	r7, #44	; 0x2c
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	40021000 	.word	0x40021000
 800475c:	007a1200 	.word	0x007a1200
 8004760:	08005230 	.word	0x08005230
 8004764:	08005240 	.word	0x08005240
 8004768:	003d0900 	.word	0x003d0900

0800476c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000000 	.word	0x20000000

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800478a:	f7ff ffef 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478e:	4601      	mov	r1, r0
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004798:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800479c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	fa92 f2a2 	rbit	r2, r2
 80047a4:	603a      	str	r2, [r7, #0]
  return result;
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	fab2 f282 	clz	r2, r2
 80047ac:	b2d2      	uxtb	r2, r2
 80047ae:	40d3      	lsrs	r3, r2
 80047b0:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80047b2:	5cd3      	ldrb	r3, [r2, r3]
 80047b4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80047b8:	4618      	mov	r0, r3
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40021000 	.word	0x40021000
 80047c4:	08005228 	.word	0x08005228

080047c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80047ce:	f7ff ffcd 	bl	800476c <HAL_RCC_GetHCLKFreq>
 80047d2:	4601      	mov	r1, r0
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80047dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80047e0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	fa92 f2a2 	rbit	r2, r2
 80047e8:	603a      	str	r2, [r7, #0]
  return result;
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	fab2 f282 	clz	r2, r2
 80047f0:	b2d2      	uxtb	r2, r2
 80047f2:	40d3      	lsrs	r3, r2
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <HAL_RCC_GetPCLK2Freq+0x40>)
 80047f6:	5cd3      	ldrb	r3, [r2, r3]
 80047f8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	08005228 	.word	0x08005228

0800480c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b092      	sub	sp, #72	; 0x48
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800481c:	2300      	movs	r3, #0
 800481e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 80d4 	beq.w	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004830:	4b4e      	ldr	r3, [pc, #312]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10e      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483c:	4b4b      	ldr	r3, [pc, #300]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4a4a      	ldr	r2, [pc, #296]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004846:	61d3      	str	r3, [r2, #28]
 8004848:	4b48      	ldr	r3, [pc, #288]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	69db      	ldr	r3, [r3, #28]
 800484c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800485a:	4b45      	ldr	r3, [pc, #276]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d118      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004866:	4b42      	ldr	r3, [pc, #264]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a41      	ldr	r2, [pc, #260]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004870:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004872:	f7fc fda1 	bl	80013b8 <HAL_GetTick>
 8004876:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	e008      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487a:	f7fc fd9d 	bl	80013b8 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b64      	cmp	r3, #100	; 0x64
 8004886:	d901      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e14b      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800488c:	4b38      	ldr	r3, [pc, #224]	; (8004970 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004898:	4b34      	ldr	r3, [pc, #208]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 8084 	beq.w	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d07c      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048b8:	4b2c      	ldr	r3, [pc, #176]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	fa93 f3a3 	rbit	r3, r3
 80048ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048d2:	fab3 f383 	clz	r3, r3
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	4b26      	ldr	r3, [pc, #152]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048dc:	4413      	add	r3, r2
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	461a      	mov	r2, r3
 80048e2:	2301      	movs	r3, #1
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048f6:	fab3 f383 	clz	r3, r3
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b1d      	ldr	r3, [pc, #116]	; (8004974 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	461a      	mov	r2, r3
 8004906:	2300      	movs	r3, #0
 8004908:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800490a:	4a18      	ldr	r2, [pc, #96]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d04b      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491a:	f7fc fd4d 	bl	80013b8 <HAL_GetTick>
 800491e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004920:	e00a      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004922:	f7fc fd49 	bl	80013b8 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004930:	4293      	cmp	r3, r2
 8004932:	d901      	bls.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e0f5      	b.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004938:	2302      	movs	r3, #2
 800493a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	fa93 f3a3 	rbit	r3, r3
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
 8004944:	2302      	movs	r3, #2
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	fa93 f3a3 	rbit	r3, r3
 800494e:	61fb      	str	r3, [r7, #28]
  return result;
 8004950:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004952:	fab3 f383 	clz	r3, r3
 8004956:	b2db      	uxtb	r3, r3
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	b2db      	uxtb	r3, r3
 800495c:	f043 0302 	orr.w	r3, r3, #2
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d108      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004966:	4b01      	ldr	r3, [pc, #4]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	e00d      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800496c:	40021000 	.word	0x40021000
 8004970:	40007000 	.word	0x40007000
 8004974:	10908100 	.word	0x10908100
 8004978:	2302      	movs	r3, #2
 800497a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	617b      	str	r3, [r7, #20]
 8004984:	4b69      	ldr	r3, [pc, #420]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	2202      	movs	r2, #2
 800498a:	613a      	str	r2, [r7, #16]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	fa92 f2a2 	rbit	r2, r2
 8004992:	60fa      	str	r2, [r7, #12]
  return result;
 8004994:	68fa      	ldr	r2, [r7, #12]
 8004996:	fab2 f282 	clz	r2, r2
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a0:	b2d2      	uxtb	r2, r2
 80049a2:	f002 021f 	and.w	r2, r2, #31
 80049a6:	2101      	movs	r1, #1
 80049a8:	fa01 f202 	lsl.w	r2, r1, r2
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0b7      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80049b2:	4b5e      	ldr	r3, [pc, #376]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049b4:	6a1b      	ldr	r3, [r3, #32]
 80049b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	495b      	ldr	r1, [pc, #364]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80049c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d105      	bne.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049cc:	4b57      	ldr	r3, [pc, #348]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	4a56      	ldr	r2, [pc, #344]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d008      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049e4:	4b51      	ldr	r3, [pc, #324]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	f023 0203 	bic.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	494e      	ldr	r1, [pc, #312]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d008      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a02:	4b4a      	ldr	r3, [pc, #296]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a06:	f023 0210 	bic.w	r2, r3, #16
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	4947      	ldr	r1, [pc, #284]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d008      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a20:	4b42      	ldr	r3, [pc, #264]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	493f      	ldr	r1, [pc, #252]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a3e:	4b3b      	ldr	r3, [pc, #236]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	f023 0220 	bic.w	r2, r3, #32
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	4938      	ldr	r1, [pc, #224]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a5c:	4b33      	ldr	r3, [pc, #204]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a60:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	4930      	ldr	r1, [pc, #192]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d008      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a7a:	4b2c      	ldr	r3, [pc, #176]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4929      	ldr	r1, [pc, #164]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d008      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004a98:	4b24      	ldr	r3, [pc, #144]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	4921      	ldr	r1, [pc, #132]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d008      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ab6:	4b1d      	ldr	r3, [pc, #116]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	491a      	ldr	r1, [pc, #104]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004ad4:	4b15      	ldr	r3, [pc, #84]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	4912      	ldr	r1, [pc, #72]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d008      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004af2:	4b0e      	ldr	r3, [pc, #56]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	490b      	ldr	r1, [pc, #44]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d008      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004b10:	4b06      	ldr	r3, [pc, #24]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	4903      	ldr	r1, [pc, #12]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3748      	adds	r7, #72	; 0x48
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000

08004b30 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e048      	b.n	8004bd4 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fc fb18 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2224      	movs	r2, #36	; 0x24
 8004b5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0201 	bic.w	r2, r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f834 	bl	8004bdc <UART_SetConfig>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d101      	bne.n	8004b7e <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e02a      	b.n	8004bd4 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f95e 	bl	8004e48 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689a      	ldr	r2, [r3, #8]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004baa:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f042 0208 	orr.w	r2, r2, #8
 8004bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f9dd 	bl	8004f8c <UART_CheckIdleState>
 8004bd2:	4603      	mov	r3, r0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b8a      	ldr	r3, [pc, #552]	; (8004e30 <UART_SetConfig+0x254>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6812      	ldr	r2, [r2, #0]
 8004c0e:	6979      	ldr	r1, [r7, #20]
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68da      	ldr	r2, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a78      	ldr	r2, [pc, #480]	; (8004e34 <UART_SetConfig+0x258>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d120      	bne.n	8004c9a <UART_SetConfig+0xbe>
 8004c58:	4b77      	ldr	r3, [pc, #476]	; (8004e38 <UART_SetConfig+0x25c>)
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d817      	bhi.n	8004c94 <UART_SetConfig+0xb8>
 8004c64:	a201      	add	r2, pc, #4	; (adr r2, 8004c6c <UART_SetConfig+0x90>)
 8004c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c6a:	bf00      	nop
 8004c6c:	08004c7d 	.word	0x08004c7d
 8004c70:	08004c89 	.word	0x08004c89
 8004c74:	08004c8f 	.word	0x08004c8f
 8004c78:	08004c83 	.word	0x08004c83
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	77fb      	strb	r3, [r7, #31]
 8004c80:	e01d      	b.n	8004cbe <UART_SetConfig+0xe2>
 8004c82:	2302      	movs	r3, #2
 8004c84:	77fb      	strb	r3, [r7, #31]
 8004c86:	e01a      	b.n	8004cbe <UART_SetConfig+0xe2>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	77fb      	strb	r3, [r7, #31]
 8004c8c:	e017      	b.n	8004cbe <UART_SetConfig+0xe2>
 8004c8e:	2308      	movs	r3, #8
 8004c90:	77fb      	strb	r3, [r7, #31]
 8004c92:	e014      	b.n	8004cbe <UART_SetConfig+0xe2>
 8004c94:	2310      	movs	r3, #16
 8004c96:	77fb      	strb	r3, [r7, #31]
 8004c98:	e011      	b.n	8004cbe <UART_SetConfig+0xe2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a67      	ldr	r2, [pc, #412]	; (8004e3c <UART_SetConfig+0x260>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d102      	bne.n	8004caa <UART_SetConfig+0xce>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	77fb      	strb	r3, [r7, #31]
 8004ca8:	e009      	b.n	8004cbe <UART_SetConfig+0xe2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a64      	ldr	r2, [pc, #400]	; (8004e40 <UART_SetConfig+0x264>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d102      	bne.n	8004cba <UART_SetConfig+0xde>
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	77fb      	strb	r3, [r7, #31]
 8004cb8:	e001      	b.n	8004cbe <UART_SetConfig+0xe2>
 8004cba:	2310      	movs	r3, #16
 8004cbc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc6:	d15b      	bne.n	8004d80 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004cc8:	7ffb      	ldrb	r3, [r7, #31]
 8004cca:	2b08      	cmp	r3, #8
 8004ccc:	d827      	bhi.n	8004d1e <UART_SetConfig+0x142>
 8004cce:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <UART_SetConfig+0xf8>)
 8004cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d09 	.word	0x08004d09
 8004ce0:	08004d1f 	.word	0x08004d1f
 8004ce4:	08004d0f 	.word	0x08004d0f
 8004ce8:	08004d1f 	.word	0x08004d1f
 8004cec:	08004d1f 	.word	0x08004d1f
 8004cf0:	08004d1f 	.word	0x08004d1f
 8004cf4:	08004d17 	.word	0x08004d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f7ff fd44 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8004cfc:	61b8      	str	r0, [r7, #24]
        break;
 8004cfe:	e013      	b.n	8004d28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7ff fd62 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8004d04:	61b8      	str	r0, [r7, #24]
        break;
 8004d06:	e00f      	b.n	8004d28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d08:	4b4e      	ldr	r3, [pc, #312]	; (8004e44 <UART_SetConfig+0x268>)
 8004d0a:	61bb      	str	r3, [r7, #24]
        break;
 8004d0c:	e00c      	b.n	8004d28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7ff fcc3 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004d12:	61b8      	str	r0, [r7, #24]
        break;
 8004d14:	e008      	b.n	8004d28 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1a:	61bb      	str	r3, [r7, #24]
        break;
 8004d1c:	e004      	b.n	8004d28 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	77bb      	strb	r3, [r7, #30]
        break;
 8004d26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d074      	beq.n	8004e18 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	005a      	lsls	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	2b0f      	cmp	r3, #15
 8004d4a:	d916      	bls.n	8004d7a <UART_SetConfig+0x19e>
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d52:	d212      	bcs.n	8004d7a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	f023 030f 	bic.w	r3, r3, #15
 8004d5c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	89fb      	ldrh	r3, [r7, #14]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	89fa      	ldrh	r2, [r7, #14]
 8004d76:	60da      	str	r2, [r3, #12]
 8004d78:	e04e      	b.n	8004e18 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	77bb      	strb	r3, [r7, #30]
 8004d7e:	e04b      	b.n	8004e18 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d80:	7ffb      	ldrb	r3, [r7, #31]
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d827      	bhi.n	8004dd6 <UART_SetConfig+0x1fa>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0x1b0>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004db9 	.word	0x08004db9
 8004d94:	08004dc1 	.word	0x08004dc1
 8004d98:	08004dd7 	.word	0x08004dd7
 8004d9c:	08004dc7 	.word	0x08004dc7
 8004da0:	08004dd7 	.word	0x08004dd7
 8004da4:	08004dd7 	.word	0x08004dd7
 8004da8:	08004dd7 	.word	0x08004dd7
 8004dac:	08004dcf 	.word	0x08004dcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db0:	f7ff fce8 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8004db4:	61b8      	str	r0, [r7, #24]
        break;
 8004db6:	e013      	b.n	8004de0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db8:	f7ff fd06 	bl	80047c8 <HAL_RCC_GetPCLK2Freq>
 8004dbc:	61b8      	str	r0, [r7, #24]
        break;
 8004dbe:	e00f      	b.n	8004de0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc0:	4b20      	ldr	r3, [pc, #128]	; (8004e44 <UART_SetConfig+0x268>)
 8004dc2:	61bb      	str	r3, [r7, #24]
        break;
 8004dc4:	e00c      	b.n	8004de0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc6:	f7ff fc67 	bl	8004698 <HAL_RCC_GetSysClockFreq>
 8004dca:	61b8      	str	r0, [r7, #24]
        break;
 8004dcc:	e008      	b.n	8004de0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd2:	61bb      	str	r3, [r7, #24]
        break;
 8004dd4:	e004      	b.n	8004de0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	77bb      	strb	r3, [r7, #30]
        break;
 8004dde:	bf00      	nop
    }

    if (pclk != 0U)
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d018      	beq.n	8004e18 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	085a      	lsrs	r2, r3, #1
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	441a      	add	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d908      	bls.n	8004e14 <UART_SetConfig+0x238>
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e08:	d204      	bcs.n	8004e14 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	e001      	b.n	8004e18 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e24:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	efff69f3 	.word	0xefff69f3
 8004e34:	40013800 	.word	0x40013800
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40004400 	.word	0x40004400
 8004e40:	40004800 	.word	0x40004800
 8004e44:	007a1200 	.word	0x007a1200

08004e48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f003 0310 	and.w	r3, r3, #16
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00a      	beq.n	8004efa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00a      	beq.n	8004f1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01a      	beq.n	8004f5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f46:	d10a      	bne.n	8004f5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00a      	beq.n	8004f80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	430a      	orrs	r2, r1
 8004f7e:	605a      	str	r2, [r3, #4]
  }
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af02      	add	r7, sp, #8
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f9c:	f7fc fa0c 	bl	80013b8 <HAL_GetTick>
 8004fa0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d10e      	bne.n	8004fce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fb4:	9300      	str	r3, [sp, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f82d 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d001      	beq.n	8004fce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e023      	b.n	8005016 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d10e      	bne.n	8004ffa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f817 	bl	800501e <UART_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e00d      	b.n	8005016 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b09c      	sub	sp, #112	; 0x70
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4613      	mov	r3, r2
 800502c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502e:	e0a5      	b.n	800517c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	f000 80a1 	beq.w	800517c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800503a:	f7fc f9bd 	bl	80013b8 <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005046:	429a      	cmp	r2, r3
 8005048:	d302      	bcc.n	8005050 <UART_WaitOnFlagUntilTimeout+0x32>
 800504a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504c:	2b00      	cmp	r3, #0
 800504e:	d13e      	bne.n	80050ce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005060:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005064:	667b      	str	r3, [r7, #100]	; 0x64
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800506e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005070:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005074:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800507c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	663b      	str	r3, [r7, #96]	; 0x60
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80050a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2220      	movs	r2, #32
 80050c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e067      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0304 	and.w	r3, r3, #4
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d04f      	beq.n	800517c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ea:	d147      	bne.n	800517c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800510a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
 8005116:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800511a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3308      	adds	r3, #8
 800512e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	613b      	str	r3, [r7, #16]
   return(result);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005148:	623a      	str	r2, [r7, #32]
 800514a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	69f9      	ldr	r1, [r7, #28]
 800514e:	6a3a      	ldr	r2, [r7, #32]
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	61bb      	str	r3, [r7, #24]
   return(result);
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e5      	bne.n	8005128 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2220      	movs	r2, #32
 8005166:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2220      	movs	r2, #32
 800516c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e010      	b.n	800519e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	69da      	ldr	r2, [r3, #28]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4013      	ands	r3, r2
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	429a      	cmp	r2, r3
 800518a:	bf0c      	ite	eq
 800518c:	2301      	moveq	r3, #1
 800518e:	2300      	movne	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	79fb      	ldrb	r3, [r7, #7]
 8005196:	429a      	cmp	r2, r3
 8005198:	f43f af4a 	beq.w	8005030 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3770      	adds	r7, #112	; 0x70
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
	...

080051a8 <__libc_init_array>:
 80051a8:	b570      	push	{r4, r5, r6, lr}
 80051aa:	4d0d      	ldr	r5, [pc, #52]	; (80051e0 <__libc_init_array+0x38>)
 80051ac:	4c0d      	ldr	r4, [pc, #52]	; (80051e4 <__libc_init_array+0x3c>)
 80051ae:	1b64      	subs	r4, r4, r5
 80051b0:	10a4      	asrs	r4, r4, #2
 80051b2:	2600      	movs	r6, #0
 80051b4:	42a6      	cmp	r6, r4
 80051b6:	d109      	bne.n	80051cc <__libc_init_array+0x24>
 80051b8:	4d0b      	ldr	r5, [pc, #44]	; (80051e8 <__libc_init_array+0x40>)
 80051ba:	4c0c      	ldr	r4, [pc, #48]	; (80051ec <__libc_init_array+0x44>)
 80051bc:	f000 f820 	bl	8005200 <_init>
 80051c0:	1b64      	subs	r4, r4, r5
 80051c2:	10a4      	asrs	r4, r4, #2
 80051c4:	2600      	movs	r6, #0
 80051c6:	42a6      	cmp	r6, r4
 80051c8:	d105      	bne.n	80051d6 <__libc_init_array+0x2e>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d0:	4798      	blx	r3
 80051d2:	3601      	adds	r6, #1
 80051d4:	e7ee      	b.n	80051b4 <__libc_init_array+0xc>
 80051d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051da:	4798      	blx	r3
 80051dc:	3601      	adds	r6, #1
 80051de:	e7f2      	b.n	80051c6 <__libc_init_array+0x1e>
 80051e0:	08005250 	.word	0x08005250
 80051e4:	08005250 	.word	0x08005250
 80051e8:	08005250 	.word	0x08005250
 80051ec:	08005254 	.word	0x08005254

080051f0 <memset>:
 80051f0:	4402      	add	r2, r0
 80051f2:	4603      	mov	r3, r0
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d100      	bne.n	80051fa <memset+0xa>
 80051f8:	4770      	bx	lr
 80051fa:	f803 1b01 	strb.w	r1, [r3], #1
 80051fe:	e7f9      	b.n	80051f4 <memset+0x4>

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
