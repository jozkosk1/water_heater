
Temp_sensor_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003d88  08003d88  00013d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db8  08003db8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003db8  08003db8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003db8  08003db8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dbc  08003dbc  00013dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08003dcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003dcc  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f47e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200b  00000000  00000000  0002f4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000314c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  000322c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b092  00000000  00000000  00032fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010702  00000000  00000000  0004e052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1035  00000000  00000000  0005e754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ff789  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b20  00000000  00000000  000ff7dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d70 	.word	0x08003d70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003d70 	.word	0x08003d70

080001c8 <SI7051_start_conversion>:

#include "SI7051.h"

/*Spusti iba konverziu teploty. Konverzia trva 7 az 11ms.*/
void SI7051_start_conversion (I2C_HandleTypeDef *i2c)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	6078      	str	r0, [r7, #4]
	uint8_t TxBuffer[]={0xF3};
 80001d0:	23f3      	movs	r3, #243	; 0xf3
 80001d2:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(i2c, I2C_ADR, TxBuffer, 1, 2);
 80001d4:	f107 020c 	add.w	r2, r7, #12
 80001d8:	2302      	movs	r3, #2
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	2301      	movs	r3, #1
 80001de:	2180      	movs	r1, #128	; 0x80
 80001e0:	6878      	ldr	r0, [r7, #4]
 80001e2:	f001 fbbd 	bl	8001960 <HAL_I2C_Master_Transmit>
}
 80001e6:	bf00      	nop
 80001e8:	3710      	adds	r7, #16
 80001ea:	46bd      	mov	sp, r7
 80001ec:	bd80      	pop	{r7, pc}
	...

080001f0 <SI7051_read_temperature>:

/*Vrati float teplotu v ï¿½C*/
int16_t SI7051_read_temperature(I2C_HandleTypeDef *i2c)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af02      	add	r7, sp, #8
 80001f6:	6078      	str	r0, [r7, #4]
	uint8_t RxBuffer[2];
	uint16_t RAW_value = 0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	82fb      	strh	r3, [r7, #22]
	int32_t temperature;
	HAL_I2C_Master_Receive(i2c, I2C_ADR, RxBuffer, 2, 10);
 80001fc:	f107 020c 	add.w	r2, r7, #12
 8000200:	230a      	movs	r3, #10
 8000202:	9300      	str	r3, [sp, #0]
 8000204:	2302      	movs	r3, #2
 8000206:	2180      	movs	r1, #128	; 0x80
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f001 fc9d 	bl	8001b48 <HAL_I2C_Master_Receive>
	RAW_value = ((uint16_t)RxBuffer[0] << 8) + RxBuffer[1];
 800020e:	7b3b      	ldrb	r3, [r7, #12]
 8000210:	b29b      	uxth	r3, r3
 8000212:	021b      	lsls	r3, r3, #8
 8000214:	b29a      	uxth	r2, r3
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	b29b      	uxth	r3, r3
 800021a:	4413      	add	r3, r2
 800021c:	82fb      	strh	r3, [r7, #22]
	temperature =((17572*(int32_t)RAW_value)>>16)-4685;
 800021e:	8afb      	ldrh	r3, [r7, #22]
 8000220:	f244 42a4 	movw	r2, #17572	; 0x44a4
 8000224:	fb02 f303 	mul.w	r3, r2, r3
 8000228:	141b      	asrs	r3, r3, #16
 800022a:	f5a3 5392 	sub.w	r3, r3, #4672	; 0x1240
 800022e:	3b0d      	subs	r3, #13
 8000230:	613b      	str	r3, [r7, #16]
	return ((int16_t)temperature)/10;
 8000232:	693b      	ldr	r3, [r7, #16]
 8000234:	b21b      	sxth	r3, r3
 8000236:	4a05      	ldr	r2, [pc, #20]	; (800024c <SI7051_read_temperature+0x5c>)
 8000238:	fb82 1203 	smull	r1, r2, r2, r3
 800023c:	1092      	asrs	r2, r2, #2
 800023e:	17db      	asrs	r3, r3, #31
 8000240:	1ad3      	subs	r3, r2, r3
 8000242:	b21b      	sxth	r3, r3
}
 8000244:	4618      	mov	r0, r3
 8000246:	3718      	adds	r7, #24
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	66666667 	.word	0x66666667

08000250 <CAN_filter_Init>:
static void MX_CAN_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */
void CAN_filter_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b08a      	sub	sp, #40	; 0x28
 8000254:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef sFilterConfig;
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000256:	2300      	movs	r3, #0
 8000258:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterBank = 0;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800025e:	2300      	movs	r3, #0
 8000260:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000262:	2300      	movs	r3, #0
 8000264:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800026a:	2300      	movs	r3, #0
 800026c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800026e:	2300      	movs	r3, #0
 8000270:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000272:	2300      	movs	r3, #0
 8000274:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8000276:	2301      	movs	r3, #1
 8000278:	623b      	str	r3, [r7, #32]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 800027a:	463b      	mov	r3, r7
 800027c:	4619      	mov	r1, r3
 800027e:	4803      	ldr	r0, [pc, #12]	; (800028c <CAN_filter_Init+0x3c>)
 8000280:	f000 fd16 	bl	8000cb0 <HAL_CAN_ConfigFilter>
}
 8000284:	bf00      	nop
 8000286:	3728      	adds	r7, #40	; 0x28
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	20000080 	.word	0x20000080

08000290 <txCAN>:
void txCAN(CAN_HandleTypeDef* hcan,CAN_TxHeaderTypeDef * header,uint8_t txBuffer[],uint32_t *TxMailbox, int16_t temp)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
	header->StdId = 0x755;
 800029e:	68bb      	ldr	r3, [r7, #8]
 80002a0:	f240 7255 	movw	r2, #1877	; 0x755
 80002a4:	601a      	str	r2, [r3, #0]
	header->ExtId = 0x01;
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	2201      	movs	r2, #1
 80002aa:	605a      	str	r2, [r3, #4]
	header->RTR = CAN_RTR_DATA;
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
	header->IDE = CAN_ID_STD;
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
	header->DLC = 4;
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	2204      	movs	r2, #4
 80002bc:	611a      	str	r2, [r3, #16]
	header->TransmitGlobalTime = DISABLE;
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	2200      	movs	r2, #0
 80002c2:	751a      	strb	r2, [r3, #20]

	txBuffer[0]=(uint8_t)(temp & 0xff);
 80002c4:	8b3b      	ldrh	r3, [r7, #24]
 80002c6:	b2da      	uxtb	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	701a      	strb	r2, [r3, #0]
	txBuffer[1]=(uint8_t)((temp >> 8) & 0xff);
 80002cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80002d0:	121b      	asrs	r3, r3, #8
 80002d2:	b21a      	sxth	r2, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3301      	adds	r3, #1
 80002d8:	b2d2      	uxtb	r2, r2
 80002da:	701a      	strb	r2, [r3, #0]
	txBuffer[2]=0;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3302      	adds	r3, #2
 80002e0:	2200      	movs	r2, #0
 80002e2:	701a      	strb	r2, [r3, #0]
	txBuffer[3]=0;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	3303      	adds	r3, #3
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]

	HAL_CAN_AddTxMessage(hcan, header, txBuffer, TxMailbox);
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	68b9      	ldr	r1, [r7, #8]
 80002f2:	68f8      	ldr	r0, [r7, #12]
 80002f4:	f000 fe33 	bl	8000f5e <HAL_CAN_AddTxMessage>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000302:	f001 fa6b 	bl	80017dc <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000306:	2032      	movs	r0, #50	; 0x32
 8000308:	f000 fb90 	bl	8000a2c <HAL_Delay>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f001 fa61 	bl	80017dc <HAL_GPIO_WritePin>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b082      	sub	sp, #8
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)		//blikanie led
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a06      	ldr	r2, [pc, #24]	; (800034c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d105      	bne.n	8000342 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8000336:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f001 fa65 	bl	800180c <HAL_GPIO_TogglePin>
	}
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40001000 	.word	0x40001000

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
int16_t temperature = 0;
 8000356:	2300      	movs	r3, #0
 8000358:	807b      	strh	r3, [r7, #2]
uint32_t timestamp=0;
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f000 faff 	bl	8000960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000362:	f000 f851 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f000 f955 	bl	8000614 <MX_GPIO_Init>
  MX_CAN_Init();
 800036a:	f000 f89d 	bl	80004a8 <MX_CAN_Init>
  MX_I2C1_Init();
 800036e:	f000 f8d1 	bl	8000514 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000372:	f000 f90f 	bl	8000594 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  SI7051_start_conversion(&hi2c1);
 8000376:	481f      	ldr	r0, [pc, #124]	; (80003f4 <main+0xa4>)
 8000378:	f7ff ff26 	bl	80001c8 <SI7051_start_conversion>
  HAL_Delay(200);
 800037c:	20c8      	movs	r0, #200	; 0xc8
 800037e:	f000 fb55 	bl	8000a2c <HAL_Delay>
  temperature = SI7051_read_temperature(&hi2c1);
 8000382:	481c      	ldr	r0, [pc, #112]	; (80003f4 <main+0xa4>)
 8000384:	f7ff ff34 	bl	80001f0 <SI7051_read_temperature>
 8000388:	4603      	mov	r3, r0
 800038a:	807b      	strh	r3, [r7, #2]
  HAL_CAN_Start(&hcan);
 800038c:	481a      	ldr	r0, [pc, #104]	; (80003f8 <main+0xa8>)
 800038e:	f000 fd59 	bl	8000e44 <HAL_CAN_Start>
  CAN_filter_Init();
 8000392:	f7ff ff5d 	bl	8000250 <CAN_filter_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /**************reset CAN rozhrania ked nastane chyba*/
		if (HAL_CAN_GetError(&hcan) == 2097152)
 8000396:	4818      	ldr	r0, [pc, #96]	; (80003f8 <main+0xa8>)
 8000398:	f000 febc 	bl	8001114 <HAL_CAN_GetError>
 800039c:	4603      	mov	r3, r0
 800039e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80003a2:	d106      	bne.n	80003b2 <main+0x62>
		{
			HAL_CAN_DeInit(&hcan);
 80003a4:	4814      	ldr	r0, [pc, #80]	; (80003f8 <main+0xa8>)
 80003a6:	f000 fc60 	bl	8000c6a <HAL_CAN_DeInit>
			MX_CAN_Init();
 80003aa:	f000 f87d 	bl	80004a8 <MX_CAN_Init>
			CAN_filter_Init();
 80003ae:	f7ff ff4f 	bl	8000250 <CAN_filter_Init>
		}
		/**************reset CAN rozhrania ked nastane chyba*/

	  SI7051_start_conversion(&hi2c1);
 80003b2:	4810      	ldr	r0, [pc, #64]	; (80003f4 <main+0xa4>)
 80003b4:	f7ff ff08 	bl	80001c8 <SI7051_start_conversion>
	    HAL_Delay(200);
 80003b8:	20c8      	movs	r0, #200	; 0xc8
 80003ba:	f000 fb37 	bl	8000a2c <HAL_Delay>
	    temperature = SI7051_read_temperature(&hi2c1);
 80003be:	480d      	ldr	r0, [pc, #52]	; (80003f4 <main+0xa4>)
 80003c0:	f7ff ff16 	bl	80001f0 <SI7051_read_temperature>
 80003c4:	4603      	mov	r3, r0
 80003c6:	807b      	strh	r3, [r7, #2]

	    if(HAL_GetTick() - timestamp > 1000)
 80003c8:	f000 fb24 	bl	8000a14 <HAL_GetTick>
 80003cc:	4602      	mov	r2, r0
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003d6:	d9de      	bls.n	8000396 <main+0x46>
	    {
			  txCAN(&hcan, &header, txBuffer, TXMailbox,temperature); //send CAN message
 80003d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80003dc:	9300      	str	r3, [sp, #0]
 80003de:	4b07      	ldr	r3, [pc, #28]	; (80003fc <main+0xac>)
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <main+0xb0>)
 80003e2:	4908      	ldr	r1, [pc, #32]	; (8000404 <main+0xb4>)
 80003e4:	4804      	ldr	r0, [pc, #16]	; (80003f8 <main+0xa8>)
 80003e6:	f7ff ff53 	bl	8000290 <txCAN>
			  timestamp = HAL_GetTick();
 80003ea:	f000 fb13 	bl	8000a14 <HAL_GetTick>
 80003ee:	6078      	str	r0, [r7, #4]
		if (HAL_CAN_GetError(&hcan) == 2097152)
 80003f0:	e7d1      	b.n	8000396 <main+0x46>
 80003f2:	bf00      	nop
 80003f4:	20000034 	.word	0x20000034
 80003f8:	20000080 	.word	0x20000080
 80003fc:	20000028 	.word	0x20000028
 8000400:	2000012c 	.word	0x2000012c
 8000404:	20000134 	.word	0x20000134

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b09c      	sub	sp, #112	; 0x70
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000412:	2228      	movs	r2, #40	; 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f003 fca2 	bl	8003d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000420:	2200      	movs	r2, #0
 8000422:	601a      	str	r2, [r3, #0]
 8000424:	605a      	str	r2, [r3, #4]
 8000426:	609a      	str	r2, [r3, #8]
 8000428:	60da      	str	r2, [r3, #12]
 800042a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042c:	463b      	mov	r3, r7
 800042e:	2234      	movs	r2, #52	; 0x34
 8000430:	2100      	movs	r1, #0
 8000432:	4618      	mov	r0, r3
 8000434:	f003 fc94 	bl	8003d60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000438:	2302      	movs	r3, #2
 800043a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800043c:	2301      	movs	r3, #1
 800043e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000440:	2310      	movs	r3, #16
 8000442:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000444:	2300      	movs	r3, #0
 8000446:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000448:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800044c:	4618      	mov	r0, r3
 800044e:	f001 fef9 	bl	8002244 <HAL_RCC_OscConfig>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000458:	f000 f91c 	bl	8000694 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045c:	230f      	movs	r3, #15
 800045e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000460:	2300      	movs	r3, #0
 8000462:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046c:	2300      	movs	r3, #0
 800046e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000470:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000474:	2100      	movs	r1, #0
 8000476:	4618      	mov	r0, r3
 8000478:	f002 fdec 	bl	8003054 <HAL_RCC_ClockConfig>
 800047c:	4603      	mov	r3, r0
 800047e:	2b00      	cmp	r3, #0
 8000480:	d001      	beq.n	8000486 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000482:	f000 f907 	bl	8000694 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000486:	2320      	movs	r3, #32
 8000488:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800048e:	463b      	mov	r3, r7
 8000490:	4618      	mov	r0, r3
 8000492:	f002 ffc5 	bl	8003420 <HAL_RCCEx_PeriphCLKConfig>
 8000496:	4603      	mov	r3, r0
 8000498:	2b00      	cmp	r3, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800049c:	f000 f8fa 	bl	8000694 <Error_Handler>
  }
}
 80004a0:	bf00      	nop
 80004a2:	3770      	adds	r7, #112	; 0x70
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}

080004a8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80004ac:	4b17      	ldr	r3, [pc, #92]	; (800050c <MX_CAN_Init+0x64>)
 80004ae:	4a18      	ldr	r2, [pc, #96]	; (8000510 <MX_CAN_Init+0x68>)
 80004b0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80004b2:	4b16      	ldr	r3, [pc, #88]	; (800050c <MX_CAN_Init+0x64>)
 80004b4:	2208      	movs	r2, #8
 80004b6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <MX_CAN_Init+0x64>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004be:	4b13      	ldr	r3, [pc, #76]	; (800050c <MX_CAN_Init+0x64>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_3TQ;
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <MX_CAN_Init+0x64>)
 80004c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80004ca:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_CAN_Init+0x64>)
 80004ce:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80004d2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <MX_CAN_Init+0x64>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_CAN_Init+0x64>)
 80004dc:	2200      	movs	r2, #0
 80004de:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	; (800050c <MX_CAN_Init+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_CAN_Init+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004ec:	4b07      	ldr	r3, [pc, #28]	; (800050c <MX_CAN_Init+0x64>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004f2:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_CAN_Init+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <MX_CAN_Init+0x64>)
 80004fa:	f000 fabb 	bl	8000a74 <HAL_CAN_Init>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000504:	f000 f8c6 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000080 	.word	0x20000080
 8000510:	40006400 	.word	0x40006400

08000514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_I2C1_Init+0x74>)
 800051a:	4a1c      	ldr	r2, [pc, #112]	; (800058c <MX_I2C1_Init+0x78>)
 800051c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_I2C1_Init+0x74>)
 8000520:	4a1b      	ldr	r2, [pc, #108]	; (8000590 <MX_I2C1_Init+0x7c>)
 8000522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000524:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_I2C1_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800052a:	4b17      	ldr	r3, [pc, #92]	; (8000588 <MX_I2C1_Init+0x74>)
 800052c:	2201      	movs	r2, #1
 800052e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000530:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_I2C1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000536:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_I2C1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <MX_I2C1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_I2C1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_I2C1_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800054e:	480e      	ldr	r0, [pc, #56]	; (8000588 <MX_I2C1_Init+0x74>)
 8000550:	f001 f976 	bl	8001840 <HAL_I2C_Init>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800055a:	f000 f89b 	bl	8000694 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800055e:	2100      	movs	r1, #0
 8000560:	4809      	ldr	r0, [pc, #36]	; (8000588 <MX_I2C1_Init+0x74>)
 8000562:	f001 fdd7 	bl	8002114 <HAL_I2CEx_ConfigAnalogFilter>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800056c:	f000 f892 	bl	8000694 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000570:	2100      	movs	r1, #0
 8000572:	4805      	ldr	r0, [pc, #20]	; (8000588 <MX_I2C1_Init+0x74>)
 8000574:	f001 fe19 	bl	80021aa <HAL_I2CEx_ConfigDigitalFilter>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800057e:	f000 f889 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	20000034 	.word	0x20000034
 800058c:	40005400 	.word	0x40005400
 8000590:	2000090e 	.word	0x2000090e

08000594 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005a4:	4b19      	ldr	r3, [pc, #100]	; (800060c <MX_TIM6_Init+0x78>)
 80005a6:	4a1a      	ldr	r2, [pc, #104]	; (8000610 <MX_TIM6_Init+0x7c>)
 80005a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 199;
 80005aa:	4b18      	ldr	r3, [pc, #96]	; (800060c <MX_TIM6_Init+0x78>)
 80005ac:	22c7      	movs	r2, #199	; 0xc7
 80005ae:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_TIM6_Init+0x78>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <MX_TIM6_Init+0x78>)
 80005b8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80005bc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_TIM6_Init+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80005c4:	4811      	ldr	r0, [pc, #68]	; (800060c <MX_TIM6_Init+0x78>)
 80005c6:	f003 f8bd 	bl	8003744 <HAL_TIM_Base_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80005d0:	f000 f860 	bl	8000694 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 80005d4:	2108      	movs	r1, #8
 80005d6:	480d      	ldr	r0, [pc, #52]	; (800060c <MX_TIM6_Init+0x78>)
 80005d8:	f003 f90b 	bl	80037f2 <HAL_TIM_OnePulse_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 80005e2:	f000 f857 	bl	8000694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4619      	mov	r1, r3
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <MX_TIM6_Init+0x78>)
 80005f4:	f003 fb0c 	bl	8003c10 <HAL_TIMEx_MasterConfigSynchronization>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 80005fe:	f000 f849 	bl	8000694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000602:	bf00      	nop
 8000604:	3710      	adds	r7, #16
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	200000e0 	.word	0x200000e0
 8000610:	40001000 	.word	0x40001000

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_GPIO_Init+0x7c>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_GPIO_Init+0x7c>)
 8000630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_GPIO_Init+0x7c>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000642:	4b13      	ldr	r3, [pc, #76]	; (8000690 <MX_GPIO_Init+0x7c>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_GPIO_Init+0x7c>)
 8000648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800064c:	6153      	str	r3, [r2, #20]
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <MX_GPIO_Init+0x7c>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f001 f8ba 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800066c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f000 fe64 	bl	8001350 <HAL_GPIO_Init>

}
 8000688:	bf00      	nop
 800068a:	3720      	adds	r7, #32
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000

08000694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000698:	b672      	cpsid	i
}
 800069a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800069c:	e7fe      	b.n	800069c <Error_Handler+0x8>
	...

080006a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <HAL_MspInit+0x44>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	4a0e      	ldr	r2, [pc, #56]	; (80006e4 <HAL_MspInit+0x44>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	6193      	str	r3, [r2, #24]
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <HAL_MspInit+0x44>)
 80006b4:	699b      	ldr	r3, [r3, #24]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <HAL_MspInit+0x44>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	4a08      	ldr	r2, [pc, #32]	; (80006e4 <HAL_MspInit+0x44>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	61d3      	str	r3, [r2, #28]
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_MspInit+0x44>)
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	603b      	str	r3, [r7, #0]
 80006d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	; 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a18      	ldr	r2, [pc, #96]	; (8000768 <HAL_CAN_MspInit+0x80>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d129      	bne.n	800075e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <HAL_CAN_MspInit+0x84>)
 800070c:	69db      	ldr	r3, [r3, #28]
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <HAL_CAN_MspInit+0x84>)
 8000710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000714:	61d3      	str	r3, [r2, #28]
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_CAN_MspInit+0x84>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_CAN_MspInit+0x84>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a11      	ldr	r2, [pc, #68]	; (800076c <HAL_CAN_MspInit+0x84>)
 8000728:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_CAN_MspInit+0x84>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800073a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 800074c:	2309      	movs	r3, #9
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4619      	mov	r1, r3
 8000756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800075a:	f000 fdf9 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	; 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40006400 	.word	0x40006400
 800076c:	40021000 	.word	0x40021000

08000770 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a09      	ldr	r2, [pc, #36]	; (80007a4 <HAL_CAN_MspDeInit+0x34>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d10b      	bne.n	800079a <HAL_CAN_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN CAN_MspDeInit 0 */

  /* USER CODE END CAN_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <HAL_CAN_MspDeInit+0x38>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <HAL_CAN_MspDeInit+0x38>)
 8000788:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800078c:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_11|GPIO_PIN_12);
 800078e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000796:	f000 ff4d 	bl	8001634 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN_MspDeInit 1 */

  /* USER CODE END CAN_MspDeInit 1 */
  }

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40006400 	.word	0x40006400
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b4:	f107 0314 	add.w	r3, r7, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a17      	ldr	r2, [pc, #92]	; (8000828 <HAL_I2C_MspInit+0x7c>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d127      	bne.n	800081e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <HAL_I2C_MspInit+0x80>)
 80007d0:	695b      	ldr	r3, [r3, #20]
 80007d2:	4a16      	ldr	r2, [pc, #88]	; (800082c <HAL_I2C_MspInit+0x80>)
 80007d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d8:	6153      	str	r3, [r2, #20]
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <HAL_I2C_MspInit+0x80>)
 80007dc:	695b      	ldr	r3, [r3, #20]
 80007de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007e6:	23c0      	movs	r3, #192	; 0xc0
 80007e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007ea:	2312      	movs	r3, #18
 80007ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f2:	2303      	movs	r3, #3
 80007f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f6:	2304      	movs	r3, #4
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480b      	ldr	r0, [pc, #44]	; (8000830 <HAL_I2C_MspInit+0x84>)
 8000802:	f000 fda5 	bl	8001350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <HAL_I2C_MspInit+0x80>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a08      	ldr	r2, [pc, #32]	; (800082c <HAL_I2C_MspInit+0x80>)
 800080c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <HAL_I2C_MspInit+0x80>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40005400 	.word	0x40005400
 800082c:	40021000 	.word	0x40021000
 8000830:	48000400 	.word	0x48000400

08000834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0d      	ldr	r2, [pc, #52]	; (8000878 <HAL_TIM_Base_MspInit+0x44>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d113      	bne.n	800086e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <HAL_TIM_Base_MspInit+0x48>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0c      	ldr	r2, [pc, #48]	; (800087c <HAL_TIM_Base_MspInit+0x48>)
 800084c:	f043 0310 	orr.w	r3, r3, #16
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_TIM_Base_MspInit+0x48>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	2036      	movs	r0, #54	; 0x36
 8000864:	f000 fd3d 	bl	80012e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000868:	2036      	movs	r0, #54	; 0x36
 800086a:	f000 fd56 	bl	800131a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40001000 	.word	0x40001000
 800087c:	40021000 	.word	0x40021000

08000880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <NMI_Handler+0x4>

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f88e 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <TIM6_DAC_IRQHandler+0x10>)
 80008da:	f002 ffe4 	bl	80038a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200000e0 	.word	0x200000e0

080008e8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <SystemInit+0x20>)
 80008ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f2:	4a05      	ldr	r2, [pc, #20]	; (8000908 <SystemInit+0x20>)
 80008f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800090c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000944 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x6>)
  ldr r1, =_edata
 8000912:	490e      	ldr	r1, [pc, #56]	; (800094c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000914:	4a0e      	ldr	r2, [pc, #56]	; (8000950 <LoopForever+0xe>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000928:	4c0b      	ldr	r4, [pc, #44]	; (8000958 <LoopForever+0x16>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000936:	f7ff ffd7 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f003 f9ed 	bl	8003d18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800093e:	f7ff fd07 	bl	8000350 <main>

08000942 <LoopForever>:

LoopForever:
    b LoopForever
 8000942:	e7fe      	b.n	8000942 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000944:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800094c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000950:	08003dc0 	.word	0x08003dc0
  ldr r2, =_sbss
 8000954:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000958:	20000150 	.word	0x20000150

0800095c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800095c:	e7fe      	b.n	800095c <ADC1_IRQHandler>
	...

08000960 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_Init+0x28>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x28>)
 800096a:	f043 0310 	orr.w	r3, r3, #16
 800096e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 fcab 	bl	80012cc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	2000      	movs	r0, #0
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff fe90 	bl	80006a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40022000 	.word	0x40022000

0800098c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fcc3 	bl	8001336 <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 fc8b 	bl	80012e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	2000014c 	.word	0x2000014c

08000a14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	2000014c 	.word	0x2000014c

08000a2c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff ffee 	bl	8000a14 <HAL_GetTick>
 8000a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d005      	beq.n	8000a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_Delay+0x44>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a52:	bf00      	nop
 8000a54:	f7ff ffde 	bl	8000a14 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8f7      	bhi.n	8000a54 <HAL_Delay+0x28>
  {
  }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008

08000a74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e0ed      	b.n	8000c62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fe28 	bl	80006e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aa8:	f7ff ffb4 	bl	8000a14 <HAL_GetTick>
 8000aac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aae:	e012      	b.n	8000ad6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab0:	f7ff ffb0 	bl	8000a14 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b0a      	cmp	r3, #10
 8000abc:	d90b      	bls.n	8000ad6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2205      	movs	r2, #5
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e0c5      	b.n	8000c62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0e5      	beq.n	8000ab0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f022 0202 	bic.w	r2, r2, #2
 8000af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000af4:	f7ff ff8e 	bl	8000a14 <HAL_GetTick>
 8000af8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000afa:	e012      	b.n	8000b22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000afc:	f7ff ff8a 	bl	8000a14 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b0a      	cmp	r3, #10
 8000b08:	d90b      	bls.n	8000b22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2205      	movs	r2, #5
 8000b1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e09f      	b.n	8000c62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1e5      	bne.n	8000afc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e007      	b.n	8000b5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7e5b      	ldrb	r3, [r3, #25]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d108      	bne.n	8000b74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e007      	b.n	8000b84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7e9b      	ldrb	r3, [r3, #26]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d108      	bne.n	8000b9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0220 	orr.w	r2, r2, #32
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0220 	bic.w	r2, r2, #32
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7edb      	ldrb	r3, [r3, #27]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d108      	bne.n	8000bc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0210 	bic.w	r2, r2, #16
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f042 0210 	orr.w	r2, r2, #16
 8000bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7f1b      	ldrb	r3, [r3, #28]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d108      	bne.n	8000bf2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0208 	orr.w	r2, r2, #8
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e007      	b.n	8000c02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0208 	bic.w	r2, r2, #8
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7f5b      	ldrb	r3, [r3, #29]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d108      	bne.n	8000c1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f042 0204 	orr.w	r2, r2, #4
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e007      	b.n	8000c2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0204 	bic.w	r2, r2, #4
 8000c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	ea42 0103 	orr.w	r1, r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e015      	b.n	8000ca8 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f925 	bl	8000ecc <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fd74 	bl	8000770 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c96:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000cc8:	7cfb      	ldrb	r3, [r7, #19]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d003      	beq.n	8000cd6 <HAL_CAN_ConfigFilter+0x26>
 8000cce:	7cfb      	ldrb	r3, [r7, #19]
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	f040 80aa 	bne.w	8000e2a <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cdc:	f043 0201 	orr.w	r2, r3, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	695b      	ldr	r3, [r3, #20]
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	2201      	movs	r2, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	401a      	ands	r2, r3
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	69db      	ldr	r3, [r3, #28]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d123      	bne.n	8000d58 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d2e:	683a      	ldr	r2, [r7, #0]
 8000d30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000d32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	3248      	adds	r2, #72	; 0x48
 8000d38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d4e:	6979      	ldr	r1, [r7, #20]
 8000d50:	3348      	adds	r3, #72	; 0x48
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d122      	bne.n	8000da6 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000d80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3248      	adds	r2, #72	; 0x48
 8000d86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d9c:	6979      	ldr	r1, [r7, #20]
 8000d9e:	3348      	adds	r3, #72	; 0x48
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	440b      	add	r3, r1
 8000da4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d109      	bne.n	8000dc2 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	401a      	ands	r2, r3
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000dc0:	e007      	b.n	8000dd2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d109      	bne.n	8000dee <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	401a      	ands	r2, r3
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000dec:	e007      	b.n	8000dfe <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	431a      	orrs	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d107      	bne.n	8000e16 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	431a      	orrs	r2, r3
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e1c:	f023 0201 	bic.w	r2, r3, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e006      	b.n	8000e38 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
  }
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	371c      	adds	r7, #28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d12e      	bne.n	8000eb6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0201 	bic.w	r2, r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000e70:	f7ff fdd0 	bl	8000a14 <HAL_GetTick>
 8000e74:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e76:	e012      	b.n	8000e9e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e78:	f7ff fdcc 	bl	8000a14 <HAL_GetTick>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	2b0a      	cmp	r3, #10
 8000e84:	d90b      	bls.n	8000e9e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2205      	movs	r2, #5
 8000e96:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e012      	b.n	8000ec4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1e5      	bne.n	8000e78 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e006      	b.n	8000ec4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
  }
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d133      	bne.n	8000f48 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 0201 	orr.w	r2, r2, #1
 8000eee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000ef0:	f7ff fd90 	bl	8000a14 <HAL_GetTick>
 8000ef4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ef6:	e012      	b.n	8000f1e <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef8:	f7ff fd8c 	bl	8000a14 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b0a      	cmp	r3, #10
 8000f04:	d90b      	bls.n	8000f1e <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2205      	movs	r2, #5
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e01b      	b.n	8000f56 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d0e5      	beq.n	8000ef8 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 0202 	bic.w	r2, r2, #2
 8000f3a:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	e006      	b.n	8000f56 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
  }
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b089      	sub	sp, #36	; 0x24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f72:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f7c:	7ffb      	ldrb	r3, [r7, #31]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d003      	beq.n	8000f8a <HAL_CAN_AddTxMessage+0x2c>
 8000f82:	7ffb      	ldrb	r3, [r7, #31]
 8000f84:	2b02      	cmp	r3, #2
 8000f86:	f040 80b8 	bne.w	80010fa <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10a      	bne.n	8000faa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d105      	bne.n	8000faa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 80a0 	beq.w	80010ea <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	0e1b      	lsrs	r3, r3, #24
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d907      	bls.n	8000fca <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e09e      	b.n	8001108 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d10d      	bne.n	8000ff8 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000fe6:	68f9      	ldr	r1, [r7, #12]
 8000fe8:	6809      	ldr	r1, [r1, #0]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3318      	adds	r3, #24
 8000ff0:	011b      	lsls	r3, r3, #4
 8000ff2:	440b      	add	r3, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e00f      	b.n	8001018 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001002:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001008:	68f9      	ldr	r1, [r7, #12]
 800100a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800100c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3318      	adds	r3, #24
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	440b      	add	r3, r1
 8001016:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3318      	adds	r3, #24
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	440b      	add	r3, r1
 8001028:	3304      	adds	r3, #4
 800102a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	7d1b      	ldrb	r3, [r3, #20]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d111      	bne.n	8001058 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	3318      	adds	r3, #24
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	4413      	add	r3, r2
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	6811      	ldr	r1, [r2, #0]
 8001048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3318      	adds	r3, #24
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	440b      	add	r3, r1
 8001054:	3304      	adds	r3, #4
 8001056:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3307      	adds	r3, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	061a      	lsls	r2, r3, #24
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3306      	adds	r3, #6
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	041b      	lsls	r3, r3, #16
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3305      	adds	r3, #5
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	4313      	orrs	r3, r2
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	3204      	adds	r2, #4
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	4610      	mov	r0, r2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	6811      	ldr	r1, [r2, #0]
 8001080:	ea43 0200 	orr.w	r2, r3, r0
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	440b      	add	r3, r1
 800108a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800108e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3303      	adds	r3, #3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	061a      	lsls	r2, r3, #24
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3302      	adds	r3, #2
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	431a      	orrs	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3301      	adds	r3, #1
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4313      	orrs	r3, r2
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	4610      	mov	r0, r2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	6811      	ldr	r1, [r2, #0]
 80010b6:	ea43 0200 	orr.w	r2, r3, r0
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	011b      	lsls	r3, r3, #4
 80010be:	440b      	add	r3, r1
 80010c0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80010c4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	3318      	adds	r3, #24
 80010ce:	011b      	lsls	r3, r3, #4
 80010d0:	4413      	add	r3, r2
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	68fa      	ldr	r2, [r7, #12]
 80010d6:	6811      	ldr	r1, [r2, #0]
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	3318      	adds	r3, #24
 80010e0:	011b      	lsls	r3, r3, #4
 80010e2:	440b      	add	r3, r1
 80010e4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e00e      	b.n	8001108 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e006      	b.n	8001108 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
  }
}
 8001108:	4618      	mov	r0, r3
 800110a:	3724      	adds	r7, #36	; 0x24
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001148:	4013      	ands	r3, r2
 800114a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800115e:	4a04      	ldr	r2, [pc, #16]	; (8001170 <__NVIC_SetPriorityGrouping+0x44>)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	60d3      	str	r3, [r2, #12]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b04      	ldr	r3, [pc, #16]	; (800118c <__NVIC_GetPriorityGrouping+0x18>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	f003 0307 	and.w	r3, r3, #7
}
 8001182:	4618      	mov	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	db0b      	blt.n	80011ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	f003 021f 	and.w	r2, r3, #31
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <__NVIC_EnableIRQ+0x38>)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	095b      	lsrs	r3, r3, #5
 80011b0:	2001      	movs	r0, #1
 80011b2:	fa00 f202 	lsl.w	r2, r0, r2
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e100 	.word	0xe000e100

080011cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	6039      	str	r1, [r7, #0]
 80011d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	db0a      	blt.n	80011f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	490c      	ldr	r1, [pc, #48]	; (8001218 <__NVIC_SetPriority+0x4c>)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	0112      	lsls	r2, r2, #4
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	440b      	add	r3, r1
 80011f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f4:	e00a      	b.n	800120c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	4908      	ldr	r1, [pc, #32]	; (800121c <__NVIC_SetPriority+0x50>)
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	3b04      	subs	r3, #4
 8001204:	0112      	lsls	r2, r2, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	440b      	add	r3, r1
 800120a:	761a      	strb	r2, [r3, #24]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f003 0307 	and.w	r3, r3, #7
 8001232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	f1c3 0307 	rsb	r3, r3, #7
 800123a:	2b04      	cmp	r3, #4
 800123c:	bf28      	it	cs
 800123e:	2304      	movcs	r3, #4
 8001240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3304      	adds	r3, #4
 8001246:	2b06      	cmp	r3, #6
 8001248:	d902      	bls.n	8001250 <NVIC_EncodePriority+0x30>
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3b03      	subs	r3, #3
 800124e:	e000      	b.n	8001252 <NVIC_EncodePriority+0x32>
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43da      	mvns	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	401a      	ands	r2, r3
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001268:	f04f 31ff 	mov.w	r1, #4294967295
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa01 f303 	lsl.w	r3, r1, r3
 8001272:	43d9      	mvns	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	4313      	orrs	r3, r2
         );
}
 800127a:	4618      	mov	r0, r3
 800127c:	3724      	adds	r7, #36	; 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	3b01      	subs	r3, #1
 8001294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001298:	d301      	bcc.n	800129e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129a:	2301      	movs	r3, #1
 800129c:	e00f      	b.n	80012be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800129e:	4a0a      	ldr	r2, [pc, #40]	; (80012c8 <SysTick_Config+0x40>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012a6:	210f      	movs	r1, #15
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f7ff ff8e 	bl	80011cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b0:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <SysTick_Config+0x40>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012b6:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <SysTick_Config+0x40>)
 80012b8:	2207      	movs	r2, #7
 80012ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	e000e010 	.word	0xe000e010

080012cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff29 	bl	800112c <__NVIC_SetPriorityGrouping>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
 80012ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f4:	f7ff ff3e 	bl	8001174 <__NVIC_GetPriorityGrouping>
 80012f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	68b9      	ldr	r1, [r7, #8]
 80012fe:	6978      	ldr	r0, [r7, #20]
 8001300:	f7ff ff8e 	bl	8001220 <NVIC_EncodePriority>
 8001304:	4602      	mov	r2, r0
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff5d 	bl	80011cc <__NVIC_SetPriority>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	4603      	mov	r3, r0
 8001322:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff31 	bl	8001190 <__NVIC_EnableIRQ>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffa2 	bl	8001288 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b087      	sub	sp, #28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135e:	e14e      	b.n	80015fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	2101      	movs	r1, #1
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	4013      	ands	r3, r2
 800136e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8140 	beq.w	80015f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d005      	beq.n	8001390 <HAL_GPIO_Init+0x40>
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d130      	bne.n	80013f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68da      	ldr	r2, [r3, #12]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c6:	2201      	movs	r2, #1
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	091b      	lsrs	r3, r3, #4
 80013dc:	f003 0201 	and.w	r2, r3, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d017      	beq.n	800142e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d123      	bne.n	8001482 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	08da      	lsrs	r2, r3, #3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3208      	adds	r2, #8
 8001442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691a      	ldr	r2, [r3, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	08da      	lsrs	r2, r3, #3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	3208      	adds	r2, #8
 800147c:	6939      	ldr	r1, [r7, #16]
 800147e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0203 	and.w	r2, r3, #3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 809a 	beq.w	80015f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c4:	4b55      	ldr	r3, [pc, #340]	; (800161c <HAL_GPIO_Init+0x2cc>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	4a54      	ldr	r2, [pc, #336]	; (800161c <HAL_GPIO_Init+0x2cc>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6193      	str	r3, [r2, #24]
 80014d0:	4b52      	ldr	r3, [pc, #328]	; (800161c <HAL_GPIO_Init+0x2cc>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014dc:	4a50      	ldr	r2, [pc, #320]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	220f      	movs	r2, #15
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001506:	d013      	beq.n	8001530 <HAL_GPIO_Init+0x1e0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a46      	ldr	r2, [pc, #280]	; (8001624 <HAL_GPIO_Init+0x2d4>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d00d      	beq.n	800152c <HAL_GPIO_Init+0x1dc>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a45      	ldr	r2, [pc, #276]	; (8001628 <HAL_GPIO_Init+0x2d8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x1d8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a44      	ldr	r2, [pc, #272]	; (800162c <HAL_GPIO_Init+0x2dc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d101      	bne.n	8001524 <HAL_GPIO_Init+0x1d4>
 8001520:	2303      	movs	r3, #3
 8001522:	e006      	b.n	8001532 <HAL_GPIO_Init+0x1e2>
 8001524:	2305      	movs	r3, #5
 8001526:	e004      	b.n	8001532 <HAL_GPIO_Init+0x1e2>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_Init+0x1e2>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_Init+0x1e2>
 8001530:	2300      	movs	r3, #0
 8001532:	697a      	ldr	r2, [r7, #20]
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001542:	4937      	ldr	r1, [pc, #220]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001550:	4b37      	ldr	r3, [pc, #220]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	43db      	mvns	r3, r3
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4013      	ands	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800156c:	693a      	ldr	r2, [r7, #16]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001574:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800157a:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	43db      	mvns	r3, r3
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4013      	ands	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4313      	orrs	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800159e:	4a24      	ldr	r2, [pc, #144]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a4:	4b22      	ldr	r3, [pc, #136]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015c8:	4a19      	ldr	r2, [pc, #100]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4013      	ands	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80015f2:	4a0f      	ldr	r2, [pc, #60]	; (8001630 <HAL_GPIO_Init+0x2e0>)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa22 f303 	lsr.w	r3, r2, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	f47f aea9 	bne.w	8001360 <HAL_GPIO_Init+0x10>
  }
}
 800160e:	bf00      	nop
 8001610:	bf00      	nop
 8001612:	371c      	adds	r7, #28
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800
 800162c:	48000c00 	.word	0x48000c00
 8001630:	40010400 	.word	0x40010400

08001634 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001634:	b480      	push	{r7}
 8001636:	b087      	sub	sp, #28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001642:	e0b2      	b.n	80017aa <HAL_GPIO_DeInit+0x176>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001644:	2201      	movs	r2, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a5 	beq.w	80017a4 <HAL_GPIO_DeInit+0x170>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800165a:	4a5b      	ldr	r2, [pc, #364]	; (80017c8 <HAL_GPIO_DeInit+0x194>)
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	220f      	movs	r2, #15
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001682:	d013      	beq.n	80016ac <HAL_GPIO_DeInit+0x78>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a51      	ldr	r2, [pc, #324]	; (80017cc <HAL_GPIO_DeInit+0x198>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00d      	beq.n	80016a8 <HAL_GPIO_DeInit+0x74>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a50      	ldr	r2, [pc, #320]	; (80017d0 <HAL_GPIO_DeInit+0x19c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d007      	beq.n	80016a4 <HAL_GPIO_DeInit+0x70>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a4f      	ldr	r2, [pc, #316]	; (80017d4 <HAL_GPIO_DeInit+0x1a0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d101      	bne.n	80016a0 <HAL_GPIO_DeInit+0x6c>
 800169c:	2303      	movs	r3, #3
 800169e:	e006      	b.n	80016ae <HAL_GPIO_DeInit+0x7a>
 80016a0:	2305      	movs	r3, #5
 80016a2:	e004      	b.n	80016ae <HAL_GPIO_DeInit+0x7a>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_DeInit+0x7a>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_GPIO_DeInit+0x7a>
 80016ac:	2300      	movs	r3, #0
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4093      	lsls	r3, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d132      	bne.n	8001724 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <HAL_GPIO_DeInit+0x1a4>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4944      	ldr	r1, [pc, #272]	; (80017d8 <HAL_GPIO_DeInit+0x1a4>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80016cc:	4b42      	ldr	r3, [pc, #264]	; (80017d8 <HAL_GPIO_DeInit+0x1a4>)
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	4940      	ldr	r1, [pc, #256]	; (80017d8 <HAL_GPIO_DeInit+0x1a4>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <HAL_GPIO_DeInit+0x1a4>)
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	493d      	ldr	r1, [pc, #244]	; (80017d8 <HAL_GPIO_DeInit+0x1a4>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80016e8:	4b3b      	ldr	r3, [pc, #236]	; (80017d8 <HAL_GPIO_DeInit+0x1a4>)
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	4939      	ldr	r1, [pc, #228]	; (80017d8 <HAL_GPIO_DeInit+0x1a4>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001706:	4a30      	ldr	r2, [pc, #192]	; (80017c8 <HAL_GPIO_DeInit+0x194>)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43da      	mvns	r2, r3
 8001716:	482c      	ldr	r0, [pc, #176]	; (80017c8 <HAL_GPIO_DeInit+0x194>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	400a      	ands	r2, r1
 800171e:	3302      	adds	r3, #2
 8001720:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2103      	movs	r1, #3
 800172e:	fa01 f303 	lsl.w	r3, r1, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	401a      	ands	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	08da      	lsrs	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3208      	adds	r2, #8
 8001742:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	08d2      	lsrs	r2, r2, #3
 800175a:	4019      	ands	r1, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3208      	adds	r2, #8
 8001760:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2103      	movs	r1, #3
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	401a      	ands	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685a      	ldr	r2, [r3, #4]
 800177e:	2101      	movs	r1, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	401a      	ands	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2103      	movs	r1, #3
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	609a      	str	r2, [r3, #8]
    }

    position++;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3301      	adds	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f47f af46 	bne.w	8001644 <HAL_GPIO_DeInit+0x10>
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	40010000 	.word	0x40010000
 80017cc:	48000400 	.word	0x48000400
 80017d0:	48000800 	.word	0x48000800
 80017d4:	48000c00 	.word	0x48000c00
 80017d8:	40010400 	.word	0x40010400

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017fa:	887a      	ldrh	r2, [r7, #2]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800181e:	887a      	ldrh	r2, [r7, #2]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4013      	ands	r3, r2
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43d9      	mvns	r1, r3
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	400b      	ands	r3, r1
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	619a      	str	r2, [r3, #24]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e081      	b.n	8001956 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d106      	bne.n	800186c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7fe ffa0 	bl	80007ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2224      	movs	r2, #36	; 0x24
 8001870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001890:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d107      	bne.n	80018ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	e006      	b.n	80018c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80018c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d104      	bne.n	80018da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6812      	ldr	r2, [r2, #0]
 80018e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69d9      	ldr	r1, [r3, #28]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a1a      	ldr	r2, [r3, #32]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2220      	movs	r2, #32
 8001942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af02      	add	r7, sp, #8
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	461a      	mov	r2, r3
 800196c:	460b      	mov	r3, r1
 800196e:	817b      	strh	r3, [r7, #10]
 8001970:	4613      	mov	r3, r2
 8001972:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b20      	cmp	r3, #32
 800197e:	f040 80da 	bne.w	8001b36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_I2C_Master_Transmit+0x30>
 800198c:	2302      	movs	r3, #2
 800198e:	e0d3      	b.n	8001b38 <HAL_I2C_Master_Transmit+0x1d8>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001998:	f7ff f83c 	bl	8000a14 <HAL_GetTick>
 800199c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2319      	movs	r3, #25
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 f9e6 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e0be      	b.n	8001b38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2221      	movs	r2, #33	; 0x21
 80019be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2210      	movs	r2, #16
 80019c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	893a      	ldrh	r2, [r7, #8]
 80019da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2200      	movs	r2, #0
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2bff      	cmp	r3, #255	; 0xff
 80019ea:	d90e      	bls.n	8001a0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	22ff      	movs	r2, #255	; 0xff
 80019f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	8979      	ldrh	r1, [r7, #10]
 80019fa:	4b51      	ldr	r3, [pc, #324]	; (8001b40 <HAL_I2C_Master_Transmit+0x1e0>)
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fb58 	bl	80020b8 <I2C_TransferConfig>
 8001a08:	e06c      	b.n	8001ae4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	8979      	ldrh	r1, [r7, #10]
 8001a1c:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <HAL_I2C_Master_Transmit+0x1e0>)
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f000 fb47 	bl	80020b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001a2a:	e05b      	b.n	8001ae4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	6a39      	ldr	r1, [r7, #32]
 8001a30:	68f8      	ldr	r0, [r7, #12]
 8001a32:	f000 f9e3 	bl	8001dfc <I2C_WaitOnTXISFlagUntilTimeout>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e07b      	b.n	8001b38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d034      	beq.n	8001ae4 <HAL_I2C_Master_Transmit+0x184>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d130      	bne.n	8001ae4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2180      	movs	r1, #128	; 0x80
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f975 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e04d      	b.n	8001b38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	2bff      	cmp	r3, #255	; 0xff
 8001aa4:	d90e      	bls.n	8001ac4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	22ff      	movs	r2, #255	; 0xff
 8001aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	8979      	ldrh	r1, [r7, #10]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 fafb 	bl	80020b8 <I2C_TransferConfig>
 8001ac2:	e00f      	b.n	8001ae4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	8979      	ldrh	r1, [r7, #10]
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 faea 	bl	80020b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d19e      	bne.n	8001a2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aee:	697a      	ldr	r2, [r7, #20]
 8001af0:	6a39      	ldr	r1, [r7, #32]
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f9c2 	bl	8001e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e01a      	b.n	8001b38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2220      	movs	r2, #32
 8001b08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_I2C_Master_Transmit+0x1e4>)
 8001b16:	400b      	ands	r3, r1
 8001b18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001b36:	2302      	movs	r3, #2
  }
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	80002000 	.word	0x80002000
 8001b44:	fe00e800 	.word	0xfe00e800

08001b48 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af02      	add	r7, sp, #8
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	817b      	strh	r3, [r7, #10]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b20      	cmp	r3, #32
 8001b66:	f040 80db 	bne.w	8001d20 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_I2C_Master_Receive+0x30>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0d4      	b.n	8001d22 <HAL_I2C_Master_Receive+0x1da>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b80:	f7fe ff48 	bl	8000a14 <HAL_GetTick>
 8001b84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2319      	movs	r3, #25
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 f8f2 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e0bf      	b.n	8001d22 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2222      	movs	r2, #34	; 0x22
 8001ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2210      	movs	r2, #16
 8001bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	893a      	ldrh	r2, [r7, #8]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d90e      	bls.n	8001bf2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	22ff      	movs	r2, #255	; 0xff
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	8979      	ldrh	r1, [r7, #10]
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <HAL_I2C_Master_Receive+0x1e4>)
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 fa64 	bl	80020b8 <I2C_TransferConfig>
 8001bf0:	e06d      	b.n	8001cce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	8979      	ldrh	r1, [r7, #10]
 8001c04:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <HAL_I2C_Master_Receive+0x1e4>)
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 fa53 	bl	80020b8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001c12:	e05c      	b.n	8001cce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	6a39      	ldr	r1, [r7, #32]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f96b 	bl	8001ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e07c      	b.n	8001d22 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	3b01      	subs	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d034      	beq.n	8001cce <HAL_I2C_Master_Receive+0x186>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d130      	bne.n	8001cce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	2200      	movs	r2, #0
 8001c74:	2180      	movs	r1, #128	; 0x80
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 f880 	bl	8001d7c <I2C_WaitOnFlagUntilTimeout>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e04d      	b.n	8001d22 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	2bff      	cmp	r3, #255	; 0xff
 8001c8e:	d90e      	bls.n	8001cae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	22ff      	movs	r2, #255	; 0xff
 8001c94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	8979      	ldrh	r1, [r7, #10]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fa06 	bl	80020b8 <I2C_TransferConfig>
 8001cac:	e00f      	b.n	8001cce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	8979      	ldrh	r1, [r7, #10]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f9f5 	bl	80020b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d19d      	bne.n	8001c14 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	6a39      	ldr	r1, [r7, #32]
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f8cd 	bl	8001e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e01a      	b.n	8001d22 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2220      	movs	r2, #32
 8001cf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_I2C_Master_Receive+0x1e8>)
 8001d00:	400b      	ands	r3, r1
 8001d02:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2220      	movs	r2, #32
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e000      	b.n	8001d22 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001d20:	2302      	movs	r3, #2
  }
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	80002400 	.word	0x80002400
 8001d30:	fe00e800 	.word	0xfe00e800

08001d34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d103      	bne.n	8001d52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d007      	beq.n	8001d70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699a      	ldr	r2, [r3, #24]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f042 0201 	orr.w	r2, r2, #1
 8001d6e:	619a      	str	r2, [r3, #24]
  }
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	603b      	str	r3, [r7, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d8c:	e022      	b.n	8001dd4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d01e      	beq.n	8001dd4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7fe fe3d 	bl	8000a14 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d113      	bne.n	8001dd4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	f043 0220 	orr.w	r2, r3, #32
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e00f      	b.n	8001df4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699a      	ldr	r2, [r3, #24]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	bf0c      	ite	eq
 8001de4:	2301      	moveq	r3, #1
 8001de6:	2300      	movne	r3, #0
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	461a      	mov	r2, r3
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d0cd      	beq.n	8001d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e08:	e02c      	b.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f8dc 	bl	8001fcc <I2C_IsAcknowledgeFailed>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e02a      	b.n	8001e74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d01e      	beq.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e26:	f7fe fdf5 	bl	8000a14 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d302      	bcc.n	8001e3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d113      	bne.n	8001e64 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f043 0220 	orr.w	r2, r3, #32
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e007      	b.n	8001e74 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d1cb      	bne.n	8001e0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e88:	e028      	b.n	8001edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	68b9      	ldr	r1, [r7, #8]
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f89c 	bl	8001fcc <I2C_IsAcknowledgeFailed>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e026      	b.n	8001eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e9e:	f7fe fdb9 	bl	8000a14 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d302      	bcc.n	8001eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d113      	bne.n	8001edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb8:	f043 0220 	orr.w	r2, r3, #32
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e007      	b.n	8001eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d1cf      	bne.n	8001e8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f00:	e055      	b.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	f000 f860 	bl	8001fcc <I2C_IsAcknowledgeFailed>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e053      	b.n	8001fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0320 	and.w	r3, r3, #32
 8001f20:	2b20      	cmp	r3, #32
 8001f22:	d129      	bne.n	8001f78 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d105      	bne.n	8001f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e03f      	b.n	8001fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2220      	movs	r2, #32
 8001f44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001f52:	400b      	ands	r3, r1
 8001f54:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e022      	b.n	8001fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f78:	f7fe fd4c 	bl	8000a14 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68ba      	ldr	r2, [r7, #8]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d302      	bcc.n	8001f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d10f      	bne.n	8001fae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f043 0220 	orr.w	r2, r3, #32
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e007      	b.n	8001fbe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d1a2      	bne.n	8001f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	fe00e800 	.word	0xfe00e800

08001fcc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d161      	bne.n	80020aa <I2C_IsAcknowledgeFailed+0xde>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ff4:	d02b      	beq.n	800204e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002004:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002006:	e022      	b.n	800204e <I2C_IsAcknowledgeFailed+0x82>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200e:	d01e      	beq.n	800204e <I2C_IsAcknowledgeFailed+0x82>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002010:	f7fe fd00 	bl	8000a14 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	d302      	bcc.n	8002026 <I2C_IsAcknowledgeFailed+0x5a>
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d113      	bne.n	800204e <I2C_IsAcknowledgeFailed+0x82>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	f043 0220 	orr.w	r2, r3, #32
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e02e      	b.n	80020ac <I2C_IsAcknowledgeFailed+0xe0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b20      	cmp	r3, #32
 800205a:	d1d5      	bne.n	8002008 <I2C_IsAcknowledgeFailed+0x3c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2210      	movs	r2, #16
 8002062:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2220      	movs	r2, #32
 800206a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f7ff fe61 	bl	8001d34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6859      	ldr	r1, [r3, #4]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <I2C_IsAcknowledgeFailed+0xe8>)
 800207e:	400b      	ands	r3, r1
 8002080:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f043 0204 	orr.w	r2, r3, #4
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <I2C_IsAcknowledgeFailed+0xe0>
  }
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	fe00e800 	.word	0xfe00e800

080020b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	607b      	str	r3, [r7, #4]
 80020c2:	460b      	mov	r3, r1
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	4613      	mov	r3, r2
 80020c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	0d5b      	lsrs	r3, r3, #21
 80020d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <I2C_TransferConfig+0x58>)
 80020da:	430b      	orrs	r3, r1
 80020dc:	43db      	mvns	r3, r3
 80020de:	ea02 0103 	and.w	r1, r2, r3
 80020e2:	897b      	ldrh	r3, [r7, #10]
 80020e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020e8:	7a7b      	ldrb	r3, [r7, #9]
 80020ea:	041b      	lsls	r3, r3, #16
 80020ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	431a      	orrs	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	03ff63ff 	.word	0x03ff63ff

08002114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b20      	cmp	r3, #32
 8002128:	d138      	bne.n	800219c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002130:	2b01      	cmp	r3, #1
 8002132:	d101      	bne.n	8002138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002134:	2302      	movs	r3, #2
 8002136:	e032      	b.n	800219e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2224      	movs	r2, #36	; 0x24
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0201 	bic.w	r2, r2, #1
 8002156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6819      	ldr	r1, [r3, #0]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e000      	b.n	800219e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800219c:	2302      	movs	r3, #2
  }
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d139      	bne.n	8002234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e033      	b.n	8002236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2224      	movs	r2, #36	; 0x24
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0201 	bic.w	r2, r2, #1
 80021ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f042 0201 	orr.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2220      	movs	r2, #32
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	e000      	b.n	8002236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002234:	2302      	movs	r3, #2
  }
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800224a:	af00      	add	r7, sp, #0
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d102      	bne.n	800225e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	f000 bef4 	b.w	8003046 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 816a 	beq.w	8002542 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800226e:	4bb3      	ldr	r3, [pc, #716]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b04      	cmp	r3, #4
 8002278:	d00c      	beq.n	8002294 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800227a:	4bb0      	ldr	r3, [pc, #704]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b08      	cmp	r3, #8
 8002284:	d159      	bne.n	800233a <HAL_RCC_OscConfig+0xf6>
 8002286:	4bad      	ldr	r3, [pc, #692]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800228e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002292:	d152      	bne.n	800233a <HAL_RCC_OscConfig+0xf6>
 8002294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002298:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	fab3 f383 	clz	r3, r3
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d102      	bne.n	80022c6 <HAL_RCC_OscConfig+0x82>
 80022c0:	4b9e      	ldr	r3, [pc, #632]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	e015      	b.n	80022f2 <HAL_RCC_OscConfig+0xae>
 80022c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80022d2:	fa93 f3a3 	rbit	r3, r3
 80022d6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80022da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022de:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80022e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80022e6:	fa93 f3a3 	rbit	r3, r3
 80022ea:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022ee:	4b93      	ldr	r3, [pc, #588]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022f6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022fe:	fa92 f2a2 	rbit	r2, r2
 8002302:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002306:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800230a:	fab2 f282 	clz	r2, r2
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	f042 0220 	orr.w	r2, r2, #32
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f002 021f 	and.w	r2, r2, #31
 800231a:	2101      	movs	r1, #1
 800231c:	fa01 f202 	lsl.w	r2, r1, r2
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 810c 	beq.w	8002540 <HAL_RCC_OscConfig+0x2fc>
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8106 	bne.w	8002540 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	f000 be86 	b.w	8003046 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002344:	d106      	bne.n	8002354 <HAL_RCC_OscConfig+0x110>
 8002346:	4b7d      	ldr	r3, [pc, #500]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7c      	ldr	r2, [pc, #496]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e030      	b.n	80023b6 <HAL_RCC_OscConfig+0x172>
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x134>
 800235e:	4b77      	ldr	r3, [pc, #476]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a76      	ldr	r2, [pc, #472]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b74      	ldr	r3, [pc, #464]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a73      	ldr	r2, [pc, #460]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	e01e      	b.n	80023b6 <HAL_RCC_OscConfig+0x172>
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0x15a>
 8002384:	4b6d      	ldr	r3, [pc, #436]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a6c      	ldr	r2, [pc, #432]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 800238a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b6a      	ldr	r3, [pc, #424]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a69      	ldr	r2, [pc, #420]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_OscConfig+0x172>
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a66      	ldr	r2, [pc, #408]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	4b64      	ldr	r3, [pc, #400]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a63      	ldr	r2, [pc, #396]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80023b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b4:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023b6:	4b61      	ldr	r3, [pc, #388]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f023 020f 	bic.w	r2, r3, #15
 80023be:	1d3b      	adds	r3, r7, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	495d      	ldr	r1, [pc, #372]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d059      	beq.n	8002488 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fb1e 	bl	8000a14 <HAL_GetTick>
 80023d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023de:	f7fe fb19 	bl	8000a14 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b64      	cmp	r3, #100	; 0x64
 80023ec:	d902      	bls.n	80023f4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f000 be29 	b.w	8003046 <HAL_RCC_OscConfig+0xe02>
 80023f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002408:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240c:	fab3 f383 	clz	r3, r3
 8002410:	b2db      	uxtb	r3, r3
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	b2db      	uxtb	r3, r3
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d102      	bne.n	8002426 <HAL_RCC_OscConfig+0x1e2>
 8002420:	4b46      	ldr	r3, [pc, #280]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	e015      	b.n	8002452 <HAL_RCC_OscConfig+0x20e>
 8002426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800242a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002432:	fa93 f3a3 	rbit	r3, r3
 8002436:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800243a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800243e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002442:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800244e:	4b3b      	ldr	r3, [pc, #236]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002456:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800245a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800245e:	fa92 f2a2 	rbit	r2, r2
 8002462:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002466:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800246a:	fab2 f282 	clz	r2, r2
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	f042 0220 	orr.w	r2, r2, #32
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	f002 021f 	and.w	r2, r2, #31
 800247a:	2101      	movs	r1, #1
 800247c:	fa01 f202 	lsl.w	r2, r1, r2
 8002480:	4013      	ands	r3, r2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0ab      	beq.n	80023de <HAL_RCC_OscConfig+0x19a>
 8002486:	e05c      	b.n	8002542 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7fe fac4 	bl	8000a14 <HAL_GetTick>
 800248c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002492:	f7fe fabf 	bl	8000a14 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d902      	bls.n	80024a8 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	f000 bdcf 	b.w	8003046 <HAL_RCC_OscConfig+0xe02>
 80024a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ac:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80024b4:	fa93 f3a3 	rbit	r3, r3
 80024b8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80024bc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	095b      	lsrs	r3, r3, #5
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d102      	bne.n	80024da <HAL_RCC_OscConfig+0x296>
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	e015      	b.n	8002506 <HAL_RCC_OscConfig+0x2c2>
 80024da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024de:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024f2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_RCC_OscConfig+0x2f8>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800250a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800250e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002512:	fa92 f2a2 	rbit	r2, r2
 8002516:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800251a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f042 0220 	orr.w	r2, r2, #32
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 021f 	and.w	r2, r2, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1ab      	bne.n	8002492 <HAL_RCC_OscConfig+0x24e>
 800253a:	e002      	b.n	8002542 <HAL_RCC_OscConfig+0x2fe>
 800253c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 816f 	beq.w	8002830 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002552:	4bd0      	ldr	r3, [pc, #832]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800255e:	4bcd      	ldr	r3, [pc, #820]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b08      	cmp	r3, #8
 8002568:	d16c      	bne.n	8002644 <HAL_RCC_OscConfig+0x400>
 800256a:	4bca      	ldr	r3, [pc, #808]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d166      	bne.n	8002644 <HAL_RCC_OscConfig+0x400>
 8002576:	2302      	movs	r3, #2
 8002578:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002580:	fa93 f3a3 	rbit	r3, r3
 8002584:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002588:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800258c:	fab3 f383 	clz	r3, r3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_OscConfig+0x362>
 80025a0:	4bbc      	ldr	r3, [pc, #752]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	e013      	b.n	80025ce <HAL_RCC_OscConfig+0x38a>
 80025a6:	2302      	movs	r3, #2
 80025a8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ac:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80025b0:	fa93 f3a3 	rbit	r3, r3
 80025b4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80025b8:	2302      	movs	r3, #2
 80025ba:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80025be:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025ca:	4bb2      	ldr	r3, [pc, #712]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	2202      	movs	r2, #2
 80025d0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80025d4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80025d8:	fa92 f2a2 	rbit	r2, r2
 80025dc:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80025e0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80025e4:	fab2 f282 	clz	r2, r2
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	f042 0220 	orr.w	r2, r2, #32
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	f002 021f 	and.w	r2, r2, #31
 80025f4:	2101      	movs	r1, #1
 80025f6:	fa01 f202 	lsl.w	r2, r1, r2
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_RCC_OscConfig+0x3cc>
 8002600:	1d3b      	adds	r3, r7, #4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d002      	beq.n	8002610 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f000 bd1b 	b.w	8003046 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4ba0      	ldr	r3, [pc, #640]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002618:	1d3b      	adds	r3, r7, #4
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	21f8      	movs	r1, #248	; 0xf8
 8002620:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002628:	fa91 f1a1 	rbit	r1, r1
 800262c:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002630:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002634:	fab1 f181 	clz	r1, r1
 8002638:	b2c9      	uxtb	r1, r1
 800263a:	408b      	lsls	r3, r1
 800263c:	4995      	ldr	r1, [pc, #596]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	e0f5      	b.n	8002830 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002644:	1d3b      	adds	r3, r7, #4
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8085 	beq.w	800275a <HAL_RCC_OscConfig+0x516>
 8002650:	2301      	movs	r3, #1
 8002652:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002662:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002670:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	461a      	mov	r2, r3
 8002678:	2301      	movs	r3, #1
 800267a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe f9ca 	bl	8000a14 <HAL_GetTick>
 8002680:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002686:	f7fe f9c5 	bl	8000a14 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d902      	bls.n	800269c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	f000 bcd5 	b.w	8003046 <HAL_RCC_OscConfig+0xe02>
 800269c:	2302      	movs	r3, #2
 800269e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80026a6:	fa93 f3a3 	rbit	r3, r3
 80026aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80026ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_OscConfig+0x488>
 80026c6:	4b73      	ldr	r3, [pc, #460]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	e013      	b.n	80026f4 <HAL_RCC_OscConfig+0x4b0>
 80026cc:	2302      	movs	r3, #2
 80026ce:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80026de:	2302      	movs	r3, #2
 80026e0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80026e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026f0:	4b68      	ldr	r3, [pc, #416]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	2202      	movs	r2, #2
 80026f6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026fe:	fa92 f2a2 	rbit	r2, r2
 8002702:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002706:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	f042 0220 	orr.w	r2, r2, #32
 8002714:	b2d2      	uxtb	r2, r2
 8002716:	f002 021f 	and.w	r2, r2, #31
 800271a:	2101      	movs	r1, #1
 800271c:	fa01 f202 	lsl.w	r2, r1, r2
 8002720:	4013      	ands	r3, r2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0af      	beq.n	8002686 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002726:	4b5b      	ldr	r3, [pc, #364]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800272e:	1d3b      	adds	r3, r7, #4
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	21f8      	movs	r1, #248	; 0xf8
 8002736:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800273e:	fa91 f1a1 	rbit	r1, r1
 8002742:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002746:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800274a:	fab1 f181 	clz	r1, r1
 800274e:	b2c9      	uxtb	r1, r1
 8002750:	408b      	lsls	r3, r1
 8002752:	4950      	ldr	r1, [pc, #320]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 8002754:	4313      	orrs	r3, r2
 8002756:	600b      	str	r3, [r1, #0]
 8002758:	e06a      	b.n	8002830 <HAL_RCC_OscConfig+0x5ec>
 800275a:	2301      	movs	r3, #1
 800275c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800276c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800277a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	461a      	mov	r2, r3
 8002782:	2300      	movs	r3, #0
 8002784:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe f945 	bl	8000a14 <HAL_GetTick>
 800278a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe f940 	bl	8000a14 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d902      	bls.n	80027a6 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	f000 bc50 	b.w	8003046 <HAL_RCC_OscConfig+0xe02>
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80027b0:	fa93 f3a3 	rbit	r3, r3
 80027b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80027b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027bc:	fab3 f383 	clz	r3, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	f043 0301 	orr.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d102      	bne.n	80027d6 <HAL_RCC_OscConfig+0x592>
 80027d0:	4b30      	ldr	r3, [pc, #192]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	e013      	b.n	80027fe <HAL_RCC_OscConfig+0x5ba>
 80027d6:	2302      	movs	r3, #2
 80027d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027e8:	2302      	movs	r3, #2
 80027ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_RCC_OscConfig+0x650>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	2202      	movs	r2, #2
 8002800:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002804:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002808:	fa92 f2a2 	rbit	r2, r2
 800280c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002810:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002814:	fab2 f282 	clz	r2, r2
 8002818:	b2d2      	uxtb	r2, r2
 800281a:	f042 0220 	orr.w	r2, r2, #32
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	f002 021f 	and.w	r2, r2, #31
 8002824:	2101      	movs	r1, #1
 8002826:	fa01 f202 	lsl.w	r2, r1, r2
 800282a:	4013      	ands	r3, r2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1af      	bne.n	8002790 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002830:	1d3b      	adds	r3, r7, #4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 80da 	beq.w	80029f4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d069      	beq.n	800291e <HAL_RCC_OscConfig+0x6da>
 800284a:	2301      	movs	r3, #1
 800284c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800285c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	b2db      	uxtb	r3, r3
 8002866:	461a      	mov	r2, r3
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <HAL_RCC_OscConfig+0x654>)
 800286a:	4413      	add	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	2301      	movs	r3, #1
 8002872:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002874:	f7fe f8ce 	bl	8000a14 <HAL_GetTick>
 8002878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287c:	e00e      	b.n	800289c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287e:	f7fe f8c9 	bl	8000a14 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d906      	bls.n	800289c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e3d9      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	10908120 	.word	0x10908120
 800289c:	2302      	movs	r3, #2
 800289e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80028ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028b2:	2202      	movs	r2, #2
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	fa93 f2a3 	rbit	r2, r3
 80028c0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80028c4:	601a      	str	r2, [r3, #0]
 80028c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028ca:	2202      	movs	r2, #2
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	fa93 f2a3 	rbit	r2, r3
 80028d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80028dc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028de:	4ba5      	ldr	r3, [pc, #660]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 80028e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028e6:	2102      	movs	r1, #2
 80028e8:	6019      	str	r1, [r3, #0]
 80028ea:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f1a3 	rbit	r1, r3
 80028f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028f8:	6019      	str	r1, [r3, #0]
  return result;
 80028fa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	fab3 f383 	clz	r3, r3
 8002904:	b2db      	uxtb	r3, r3
 8002906:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	2101      	movs	r1, #1
 8002912:	fa01 f303 	lsl.w	r3, r1, r3
 8002916:	4013      	ands	r3, r2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0b0      	beq.n	800287e <HAL_RCC_OscConfig+0x63a>
 800291c:	e06a      	b.n	80029f4 <HAL_RCC_OscConfig+0x7b0>
 800291e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002926:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	fa93 f2a3 	rbit	r2, r3
 8002930:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002934:	601a      	str	r2, [r3, #0]
  return result;
 8002936:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800293a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293c:	fab3 f383 	clz	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	4b8c      	ldr	r3, [pc, #560]	; (8002b78 <HAL_RCC_OscConfig+0x934>)
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	2300      	movs	r3, #0
 800294e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe f860 	bl	8000a14 <HAL_GetTick>
 8002954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002958:	e009      	b.n	800296e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe f85b 	bl	8000a14 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e36b      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
 800296e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002972:	2202      	movs	r2, #2
 8002974:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002976:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	fa93 f2a3 	rbit	r2, r3
 8002980:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800298a:	2202      	movs	r2, #2
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029a2:	2202      	movs	r2, #2
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b6:	4b6f      	ldr	r3, [pc, #444]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 80029b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029be:	2102      	movs	r1, #2
 80029c0:	6019      	str	r1, [r3, #0]
 80029c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f1a3 	rbit	r1, r3
 80029cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029d0:	6019      	str	r1, [r3, #0]
  return result;
 80029d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	2101      	movs	r1, #1
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	4013      	ands	r3, r2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1b2      	bne.n	800295a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	1d3b      	adds	r3, r7, #4
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8158 	beq.w	8002cb4 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d112      	bne.n	8002a3c <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	4b57      	ldr	r3, [pc, #348]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	4a56      	ldr	r2, [pc, #344]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	61d3      	str	r3, [r2, #28]
 8002a22:	4b54      	ldr	r3, [pc, #336]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a2a:	f107 0308 	add.w	r3, r7, #8
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	f107 0308 	add.w	r3, r7, #8
 8002a34:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a36:	2301      	movs	r3, #1
 8002a38:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b4f      	ldr	r3, [pc, #316]	; (8002b7c <HAL_RCC_OscConfig+0x938>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d11a      	bne.n	8002a7e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a48:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <HAL_RCC_OscConfig+0x938>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a4b      	ldr	r2, [pc, #300]	; (8002b7c <HAL_RCC_OscConfig+0x938>)
 8002a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a52:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a54:	f7fd ffde 	bl	8000a14 <HAL_GetTick>
 8002a58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e009      	b.n	8002a72 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fd ffd9 	bl	8000a14 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e2e9      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a72:	4b42      	ldr	r3, [pc, #264]	; (8002b7c <HAL_RCC_OscConfig+0x938>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0ef      	beq.n	8002a5e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d106      	bne.n	8002a96 <HAL_RCC_OscConfig+0x852>
 8002a88:	4b3a      	ldr	r3, [pc, #232]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a39      	ldr	r2, [pc, #228]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e02f      	b.n	8002af6 <HAL_RCC_OscConfig+0x8b2>
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x876>
 8002aa0:	4b34      	ldr	r3, [pc, #208]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	4a33      	ldr	r2, [pc, #204]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6213      	str	r3, [r2, #32]
 8002aac:	4b31      	ldr	r3, [pc, #196]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4a30      	ldr	r2, [pc, #192]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6213      	str	r3, [r2, #32]
 8002ab8:	e01d      	b.n	8002af6 <HAL_RCC_OscConfig+0x8b2>
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	2b05      	cmp	r3, #5
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCC_OscConfig+0x89a>
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4a2a      	ldr	r2, [pc, #168]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002aca:	f043 0304 	orr.w	r3, r3, #4
 8002ace:	6213      	str	r3, [r2, #32]
 8002ad0:	4b28      	ldr	r3, [pc, #160]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a27      	ldr	r2, [pc, #156]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6213      	str	r3, [r2, #32]
 8002adc:	e00b      	b.n	8002af6 <HAL_RCC_OscConfig+0x8b2>
 8002ade:	4b25      	ldr	r3, [pc, #148]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6213      	str	r3, [r2, #32]
 8002aea:	4b22      	ldr	r3, [pc, #136]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002af0:	f023 0304 	bic.w	r3, r3, #4
 8002af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d06b      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b00:	f7fd ff88 	bl	8000a14 <HAL_GetTick>
 8002b04:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b08:	e00b      	b.n	8002b22 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fd ff83 	bl	8000a14 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e291      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
 8002b22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b26:	2202      	movs	r2, #2
 8002b28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	fa93 f2a3 	rbit	r2, r3
 8002b34:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b3e:	2202      	movs	r2, #2
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	fa93 f2a3 	rbit	r2, r3
 8002b4c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b50:	601a      	str	r2, [r3, #0]
  return result;
 8002b52:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b58:	fab3 f383 	clz	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d109      	bne.n	8002b80 <HAL_RCC_OscConfig+0x93c>
 8002b6c:	4b01      	ldr	r3, [pc, #4]	; (8002b74 <HAL_RCC_OscConfig+0x930>)
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	e014      	b.n	8002b9c <HAL_RCC_OscConfig+0x958>
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	10908120 	.word	0x10908120
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b84:	2202      	movs	r2, #2
 8002b86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	fa93 f2a3 	rbit	r2, r3
 8002b92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	4bbb      	ldr	r3, [pc, #748]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ba0:	2102      	movs	r1, #2
 8002ba2:	6011      	str	r1, [r2, #0]
 8002ba4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	fa92 f1a2 	rbit	r1, r2
 8002bae:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bb2:	6011      	str	r1, [r2, #0]
  return result;
 8002bb4:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	fab2 f282 	clz	r2, r2
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	f002 021f 	and.w	r2, r2, #31
 8002bca:	2101      	movs	r1, #1
 8002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d099      	beq.n	8002b0a <HAL_RCC_OscConfig+0x8c6>
 8002bd6:	e063      	b.n	8002ca0 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd8:	f7fd ff1c 	bl	8000a14 <HAL_GetTick>
 8002bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be0:	e00b      	b.n	8002bfa <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be2:	f7fd ff17 	bl	8000a14 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e225      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
 8002bfa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bfe:	2202      	movs	r2, #2
 8002c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f2a3 	rbit	r2, r3
 8002c0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c16:	2202      	movs	r2, #2
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c28:	601a      	str	r2, [r3, #0]
  return result;
 8002c2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c30:	fab3 f383 	clz	r3, r3
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	f043 0302 	orr.w	r3, r3, #2
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_OscConfig+0xa06>
 8002c44:	4b90      	ldr	r3, [pc, #576]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	e00d      	b.n	8002c66 <HAL_RCC_OscConfig+0xa22>
 8002c4a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c4e:	2202      	movs	r2, #2
 8002c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	4b89      	ldr	r3, [pc, #548]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c6a:	2102      	movs	r1, #2
 8002c6c:	6011      	str	r1, [r2, #0]
 8002c6e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	fa92 f1a2 	rbit	r1, r2
 8002c78:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c7c:	6011      	str	r1, [r2, #0]
  return result;
 8002c7e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f002 021f 	and.w	r2, r2, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1a0      	bne.n	8002be2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ca0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca8:	4b77      	ldr	r3, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	4a76      	ldr	r2, [pc, #472]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 81c2 	beq.w	8003044 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc0:	4b71      	ldr	r3, [pc, #452]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	f000 819c 	beq.w	8003006 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	f040 8114 	bne.w	8002f02 <HAL_RCC_OscConfig+0xcbe>
 8002cda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	fa93 f2a3 	rbit	r2, r3
 8002cee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cf2:	601a      	str	r2, [r3, #0]
  return result;
 8002cf4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cf8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fd fe80 	bl	8000a14 <HAL_GetTick>
 8002d14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d18:	e009      	b.n	8002d2e <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fd fe7b 	bl	8000a14 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e18b      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
 8002d2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	fa93 f2a3 	rbit	r2, r3
 8002d42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d46:	601a      	str	r2, [r3, #0]
  return result;
 8002d48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	095b      	lsrs	r3, r3, #5
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	f043 0301 	orr.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d102      	bne.n	8002d68 <HAL_RCC_OscConfig+0xb24>
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	e01b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb5c>
 8002d68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	fa93 f2a3 	rbit	r2, r3
 8002d7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002da4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002da8:	6011      	str	r1, [r2, #0]
 8002daa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	fa92 f1a2 	rbit	r1, r2
 8002db4:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002db8:	6011      	str	r1, [r2, #0]
  return result;
 8002dba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	fab2 f282 	clz	r2, r2
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	f042 0220 	orr.w	r2, r2, #32
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 021f 	and.w	r2, r2, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d19e      	bne.n	8002d1a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ddc:	4b2a      	ldr	r3, [pc, #168]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002dea:	1d3b      	adds	r3, r7, #4
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	430b      	orrs	r3, r1
 8002df2:	4925      	ldr	r1, [pc, #148]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	604b      	str	r3, [r1, #4]
 8002df8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	fa93 f2a3 	rbit	r2, r3
 8002e0c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e10:	601a      	str	r2, [r3, #0]
  return result;
 8002e12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e16:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e2e:	f7fd fdf1 	bl	8000a14 <HAL_GetTick>
 8002e32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e36:	e009      	b.n	8002e4c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fd fdec 	bl	8000a14 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0fc      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
 8002e4c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e64:	601a      	str	r2, [r3, #0]
  return result;
 8002e66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e6c:	fab3 f383 	clz	r3, r3
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	095b      	lsrs	r3, r3, #5
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0xc48>
 8002e80:	4b01      	ldr	r3, [pc, #4]	; (8002e88 <HAL_RCC_OscConfig+0xc44>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	e01e      	b.n	8002ec4 <HAL_RCC_OscConfig+0xc80>
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	fa93 f2a3 	rbit	r2, r3
 8002ea0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f2a3 	rbit	r2, r3
 8002eba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	4b63      	ldr	r3, [pc, #396]	; (8003050 <HAL_RCC_OscConfig+0xe0c>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ec8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ecc:	6011      	str	r1, [r2, #0]
 8002ece:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002ed2:	6812      	ldr	r2, [r2, #0]
 8002ed4:	fa92 f1a2 	rbit	r1, r2
 8002ed8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002edc:	6011      	str	r1, [r2, #0]
  return result;
 8002ede:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	fab2 f282 	clz	r2, r2
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	f042 0220 	orr.w	r2, r2, #32
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	f002 021f 	and.w	r2, r2, #31
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d09b      	beq.n	8002e38 <HAL_RCC_OscConfig+0xbf4>
 8002f00:	e0a0      	b.n	8003044 <HAL_RCC_OscConfig+0xe00>
 8002f02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	fa93 f2a3 	rbit	r2, r3
 8002f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f1a:	601a      	str	r2, [r3, #0]
  return result;
 8002f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	fab3 f383 	clz	r3, r3
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	461a      	mov	r2, r3
 8002f34:	2300      	movs	r3, #0
 8002f36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fd fd6c 	bl	8000a14 <HAL_GetTick>
 8002f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	e009      	b.n	8002f56 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fd fd67 	bl	8000a14 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e077      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
 8002f56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	fa93 f2a3 	rbit	r2, r3
 8002f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f6e:	601a      	str	r2, [r3, #0]
  return result;
 8002f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0xd4c>
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_RCC_OscConfig+0xe0c>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	e01b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xd84>
 8002f90:	f107 0320 	add.w	r3, r7, #32
 8002f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	f107 0320 	add.w	r3, r7, #32
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	fa93 f2a3 	rbit	r2, r3
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f107 0318 	add.w	r3, r7, #24
 8002fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f107 0318 	add.w	r3, r7, #24
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	fa93 f2a3 	rbit	r2, r3
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0xe0c>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f107 0210 	add.w	r2, r7, #16
 8002fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fd0:	6011      	str	r1, [r2, #0]
 8002fd2:	f107 0210 	add.w	r2, r7, #16
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	fa92 f1a2 	rbit	r1, r2
 8002fdc:	f107 020c 	add.w	r2, r7, #12
 8002fe0:	6011      	str	r1, [r2, #0]
  return result;
 8002fe2:	f107 020c 	add.w	r2, r7, #12
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	fab2 f282 	clz	r2, r2
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	f042 0220 	orr.w	r2, r2, #32
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f002 021f 	and.w	r2, r2, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d19e      	bne.n	8002f42 <HAL_RCC_OscConfig+0xcfe>
 8003004:	e01e      	b.n	8003044 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003006:	1d3b      	adds	r3, r7, #4
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d101      	bne.n	8003014 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e018      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <HAL_RCC_OscConfig+0xe0c>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800301c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003020:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	429a      	cmp	r2, r3
 800302c:	d108      	bne.n	8003040 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800302e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800303c:	429a      	cmp	r2, r3
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40021000 	.word	0x40021000

08003054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b09e      	sub	sp, #120	; 0x78
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800305e:	2300      	movs	r3, #0
 8003060:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e162      	b.n	8003332 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800306c:	4b90      	ldr	r3, [pc, #576]	; (80032b0 <HAL_RCC_ClockConfig+0x25c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d910      	bls.n	800309c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b8d      	ldr	r3, [pc, #564]	; (80032b0 <HAL_RCC_ClockConfig+0x25c>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 0207 	bic.w	r2, r3, #7
 8003082:	498b      	ldr	r1, [pc, #556]	; (80032b0 <HAL_RCC_ClockConfig+0x25c>)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4313      	orrs	r3, r2
 8003088:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800308a:	4b89      	ldr	r3, [pc, #548]	; (80032b0 <HAL_RCC_ClockConfig+0x25c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e14a      	b.n	8003332 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a8:	4b82      	ldr	r3, [pc, #520]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	497f      	ldr	r1, [pc, #508]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 80dc 	beq.w	8003280 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d13c      	bne.n	800314a <HAL_RCC_ClockConfig+0xf6>
 80030d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80030de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e0:	fab3 f383 	clz	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	095b      	lsrs	r3, r3, #5
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	f043 0301 	orr.w	r3, r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d102      	bne.n	80030fa <HAL_RCC_ClockConfig+0xa6>
 80030f4:	4b6f      	ldr	r3, [pc, #444]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	e00f      	b.n	800311a <HAL_RCC_ClockConfig+0xc6>
 80030fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003102:	fa93 f3a3 	rbit	r3, r3
 8003106:	667b      	str	r3, [r7, #100]	; 0x64
 8003108:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800310c:	663b      	str	r3, [r7, #96]	; 0x60
 800310e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003116:	4b67      	ldr	r3, [pc, #412]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 8003118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800311e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003120:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003122:	fa92 f2a2 	rbit	r2, r2
 8003126:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800312a:	fab2 f282 	clz	r2, r2
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	f042 0220 	orr.w	r2, r2, #32
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	f002 021f 	and.w	r2, r2, #31
 800313a:	2101      	movs	r1, #1
 800313c:	fa01 f202 	lsl.w	r2, r1, r2
 8003140:	4013      	ands	r3, r2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d17b      	bne.n	800323e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e0f3      	b.n	8003332 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d13c      	bne.n	80031cc <HAL_RCC_ClockConfig+0x178>
 8003152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003156:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800315a:	fa93 f3a3 	rbit	r3, r3
 800315e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	fab3 f383 	clz	r3, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	b2db      	uxtb	r3, r3
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	d102      	bne.n	800317c <HAL_RCC_ClockConfig+0x128>
 8003176:	4b4f      	ldr	r3, [pc, #316]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	e00f      	b.n	800319c <HAL_RCC_ClockConfig+0x148>
 800317c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003180:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	647b      	str	r3, [r7, #68]	; 0x44
 800318a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
 8003190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003198:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80031a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031a4:	fa92 f2a2 	rbit	r2, r2
 80031a8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ac:	fab2 f282 	clz	r2, r2
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f042 0220 	orr.w	r2, r2, #32
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	f002 021f 	and.w	r2, r2, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f202 	lsl.w	r2, r1, r2
 80031c2:	4013      	ands	r3, r2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d13a      	bne.n	800323e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0b2      	b.n	8003332 <HAL_RCC_ClockConfig+0x2de>
 80031cc:	2302      	movs	r3, #2
 80031ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d102      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x1a0>
 80031ee:	4b31      	ldr	r3, [pc, #196]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	e00d      	b.n	8003210 <HAL_RCC_ClockConfig+0x1bc>
 80031f4:	2302      	movs	r3, #2
 80031f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	61fb      	str	r3, [r7, #28]
 800320c:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2202      	movs	r2, #2
 8003212:	61ba      	str	r2, [r7, #24]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	fa92 f2a2 	rbit	r2, r2
 800321a:	617a      	str	r2, [r7, #20]
  return result;
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	fab2 f282 	clz	r2, r2
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	f042 0220 	orr.w	r2, r2, #32
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	f002 021f 	and.w	r2, r2, #31
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e079      	b.n	8003332 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800323e:	4b1d      	ldr	r3, [pc, #116]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f023 0203 	bic.w	r2, r3, #3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	491a      	ldr	r1, [pc, #104]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003250:	f7fd fbe0 	bl	8000a14 <HAL_GetTick>
 8003254:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	e00a      	b.n	800326e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003258:	f7fd fbdc 	bl	8000a14 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e061      	b.n	8003332 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <HAL_RCC_ClockConfig+0x260>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f003 020c 	and.w	r2, r3, #12
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	429a      	cmp	r2, r3
 800327e:	d1eb      	bne.n	8003258 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003280:	4b0b      	ldr	r3, [pc, #44]	; (80032b0 <HAL_RCC_ClockConfig+0x25c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	683a      	ldr	r2, [r7, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d214      	bcs.n	80032b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800328e:	4b08      	ldr	r3, [pc, #32]	; (80032b0 <HAL_RCC_ClockConfig+0x25c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f023 0207 	bic.w	r2, r3, #7
 8003296:	4906      	ldr	r1, [pc, #24]	; (80032b0 <HAL_RCC_ClockConfig+0x25c>)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <HAL_RCC_ClockConfig+0x25c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d005      	beq.n	80032b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e040      	b.n	8003332 <HAL_RCC_ClockConfig+0x2de>
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d008      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032c4:	4b1d      	ldr	r3, [pc, #116]	; (800333c <HAL_RCC_ClockConfig+0x2e8>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	491a      	ldr	r1, [pc, #104]	; (800333c <HAL_RCC_ClockConfig+0x2e8>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0308 	and.w	r3, r3, #8
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <HAL_RCC_ClockConfig+0x2e8>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4912      	ldr	r1, [pc, #72]	; (800333c <HAL_RCC_ClockConfig+0x2e8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032f6:	f000 f829 	bl	800334c <HAL_RCC_GetSysClockFreq>
 80032fa:	4601      	mov	r1, r0
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <HAL_RCC_ClockConfig+0x2e8>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003304:	22f0      	movs	r2, #240	; 0xf0
 8003306:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	fa92 f2a2 	rbit	r2, r2
 800330e:	60fa      	str	r2, [r7, #12]
  return result;
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	fab2 f282 	clz	r2, r2
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	40d3      	lsrs	r3, r2
 800331a:	4a09      	ldr	r2, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x2ec>)
 800331c:	5cd3      	ldrb	r3, [r2, r3]
 800331e:	fa21 f303 	lsr.w	r3, r1, r3
 8003322:	4a08      	ldr	r2, [pc, #32]	; (8003344 <HAL_RCC_ClockConfig+0x2f0>)
 8003324:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003326:	4b08      	ldr	r3, [pc, #32]	; (8003348 <HAL_RCC_ClockConfig+0x2f4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd fb2e 	bl	800098c <HAL_InitTick>
  
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3778      	adds	r7, #120	; 0x78
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40021000 	.word	0x40021000
 8003340:	08003d88 	.word	0x08003d88
 8003344:	20000000 	.word	0x20000000
 8003348:	20000004 	.word	0x20000004

0800334c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	b08b      	sub	sp, #44	; 0x2c
 8003350:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	2300      	movs	r3, #0
 8003358:	61bb      	str	r3, [r7, #24]
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003362:	2300      	movs	r3, #0
 8003364:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003366:	4b29      	ldr	r3, [pc, #164]	; (800340c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 030c 	and.w	r3, r3, #12
 8003372:	2b04      	cmp	r3, #4
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x30>
 8003376:	2b08      	cmp	r3, #8
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x36>
 800337a:	e03c      	b.n	80033f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCC_GetSysClockFreq+0xc4>)
 800337e:	623b      	str	r3, [r7, #32]
      break;
 8003380:	e03c      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003388:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800338c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	fa92 f2a2 	rbit	r2, r2
 8003394:	607a      	str	r2, [r7, #4]
  return result;
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	fab2 f282 	clz	r2, r2
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	40d3      	lsrs	r3, r2
 80033a0:	4a1c      	ldr	r2, [pc, #112]	; (8003414 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	220f      	movs	r2, #15
 80033b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	fa92 f2a2 	rbit	r2, r2
 80033b8:	60fa      	str	r2, [r7, #12]
  return result;
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	fab2 f282 	clz	r2, r2
 80033c0:	b2d2      	uxtb	r2, r2
 80033c2:	40d3      	lsrs	r3, r2
 80033c4:	4a14      	ldr	r2, [pc, #80]	; (8003418 <HAL_RCC_GetSysClockFreq+0xcc>)
 80033c6:	5cd3      	ldrb	r3, [r2, r3]
 80033c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80033d4:	4a0e      	ldr	r2, [pc, #56]	; (8003410 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fb02 f303 	mul.w	r3, r2, r3
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24
 80033e4:	e004      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	4a0c      	ldr	r2, [pc, #48]	; (800341c <HAL_RCC_GetSysClockFreq+0xd0>)
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	623b      	str	r3, [r7, #32]
      break;
 80033f4:	e002      	b.n	80033fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033f8:	623b      	str	r3, [r7, #32]
      break;
 80033fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033fc:	6a3b      	ldr	r3, [r7, #32]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	372c      	adds	r7, #44	; 0x2c
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000
 8003410:	007a1200 	.word	0x007a1200
 8003414:	08003d98 	.word	0x08003d98
 8003418:	08003da8 	.word	0x08003da8
 800341c:	003d0900 	.word	0x003d0900

08003420 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b092      	sub	sp, #72	; 0x48
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003430:	2300      	movs	r3, #0
 8003432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80d4 	beq.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003444:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10e      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4a4a      	ldr	r2, [pc, #296]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800345a:	61d3      	str	r3, [r2, #28]
 800345c:	4b48      	ldr	r3, [pc, #288]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800345e:	69db      	ldr	r3, [r3, #28]
 8003460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003464:	60bb      	str	r3, [r7, #8]
 8003466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003468:	2301      	movs	r3, #1
 800346a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346e:	4b45      	ldr	r3, [pc, #276]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d118      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800347a:	4b42      	ldr	r3, [pc, #264]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a41      	ldr	r2, [pc, #260]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003486:	f7fd fac5 	bl	8000a14 <HAL_GetTick>
 800348a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	e008      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348e:	f7fd fac1 	bl	8000a14 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b64      	cmp	r3, #100	; 0x64
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e14b      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a0:	4b38      	ldr	r3, [pc, #224]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034ac:	4b34      	ldr	r3, [pc, #208]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8084 	beq.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d07c      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034cc:	4b2c      	ldr	r3, [pc, #176]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	fa93 f3a3 	rbit	r3, r3
 80034e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b26      	ldr	r3, [pc, #152]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	461a      	mov	r2, r3
 80034f6:	2301      	movs	r3, #1
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	4b1d      	ldr	r3, [pc, #116]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003514:	4413      	add	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	461a      	mov	r2, r3
 800351a:	2300      	movs	r3, #0
 800351c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800351e:	4a18      	ldr	r2, [pc, #96]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003522:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d04b      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fd fa71 	bl	8000a14 <HAL_GetTick>
 8003532:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fd fa6d 	bl	8000a14 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	; 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e0f5      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x318>
 800354c:	2302      	movs	r3, #2
 800354e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003552:	fa93 f3a3 	rbit	r3, r3
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
 8003558:	2302      	movs	r3, #2
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	fa93 f3a3 	rbit	r3, r3
 8003562:	61fb      	str	r3, [r7, #28]
  return result;
 8003564:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	095b      	lsrs	r3, r3, #5
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d108      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800357a:	4b01      	ldr	r3, [pc, #4]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	e00d      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003580:	40021000 	.word	0x40021000
 8003584:	40007000 	.word	0x40007000
 8003588:	10908100 	.word	0x10908100
 800358c:	2302      	movs	r3, #2
 800358e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	fa93 f3a3 	rbit	r3, r3
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	4b69      	ldr	r3, [pc, #420]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2202      	movs	r2, #2
 800359e:	613a      	str	r2, [r7, #16]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	fa92 f2a2 	rbit	r2, r2
 80035a6:	60fa      	str	r2, [r7, #12]
  return result;
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	fab2 f282 	clz	r2, r2
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	f002 021f 	and.w	r2, r2, #31
 80035ba:	2101      	movs	r1, #1
 80035bc:	fa01 f202 	lsl.w	r2, r1, r2
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0b7      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80035c6:	4b5e      	ldr	r3, [pc, #376]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	495b      	ldr	r1, [pc, #364]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80035d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b57      	ldr	r3, [pc, #348]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	4a56      	ldr	r2, [pc, #344]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f8:	4b51      	ldr	r3, [pc, #324]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	f023 0203 	bic.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494e      	ldr	r1, [pc, #312]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003606:	4313      	orrs	r3, r2
 8003608:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b00      	cmp	r3, #0
 8003614:	d008      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003616:	4b4a      	ldr	r3, [pc, #296]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f023 0210 	bic.w	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4947      	ldr	r1, [pc, #284]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003624:	4313      	orrs	r3, r2
 8003626:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003634:	4b42      	ldr	r3, [pc, #264]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003640:	493f      	ldr	r1, [pc, #252]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003642:	4313      	orrs	r3, r2
 8003644:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d008      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003652:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f023 0220 	bic.w	r2, r3, #32
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	4938      	ldr	r1, [pc, #224]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003660:	4313      	orrs	r3, r2
 8003662:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003670:	4b33      	ldr	r3, [pc, #204]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	4930      	ldr	r1, [pc, #192]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800367e:	4313      	orrs	r3, r2
 8003680:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800368a:	2b00      	cmp	r3, #0
 800368c:	d008      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4929      	ldr	r1, [pc, #164]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80036ac:	4b24      	ldr	r3, [pc, #144]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	4921      	ldr	r1, [pc, #132]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	491a      	ldr	r1, [pc, #104]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	4912      	ldr	r1, [pc, #72]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003706:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	490b      	ldr	r1, [pc, #44]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003714:	4313      	orrs	r3, r2
 8003716:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003732:	4313      	orrs	r3, r2
 8003734:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3748      	adds	r7, #72	; 0x48
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40021000 	.word	0x40021000

08003744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e049      	b.n	80037ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd f862 	bl	8000834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 f9d6 	bl	8003b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b082      	sub	sp, #8
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
 80037fa:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e041      	b.n	800388a <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f839 	bl	8003892 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 f97e 	bl	8003b34 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0208 	bic.w	r2, r2, #8
 8003846:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d122      	bne.n	8003902 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d11b      	bne.n	8003902 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f06f 0202 	mvn.w	r2, #2
 80038d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 0303 	and.w	r3, r3, #3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f905 	bl	8003af8 <HAL_TIM_IC_CaptureCallback>
 80038ee:	e005      	b.n	80038fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 f8f7 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f908 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b04      	cmp	r3, #4
 800390e:	d122      	bne.n	8003956 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b04      	cmp	r3, #4
 800391c:	d11b      	bne.n	8003956 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f06f 0204 	mvn.w	r2, #4
 8003926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 f8db 	bl	8003af8 <HAL_TIM_IC_CaptureCallback>
 8003942:	e005      	b.n	8003950 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f8cd 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8de 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f003 0308 	and.w	r3, r3, #8
 8003960:	2b08      	cmp	r3, #8
 8003962:	d122      	bne.n	80039aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b08      	cmp	r3, #8
 8003970:	d11b      	bne.n	80039aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f06f 0208 	mvn.w	r2, #8
 800397a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f8b1 	bl	8003af8 <HAL_TIM_IC_CaptureCallback>
 8003996:	e005      	b.n	80039a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f8a3 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8b4 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b10      	cmp	r3, #16
 80039b6:	d122      	bne.n	80039fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	2b10      	cmp	r3, #16
 80039c4:	d11b      	bne.n	80039fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f06f 0210 	mvn.w	r2, #16
 80039ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2208      	movs	r2, #8
 80039d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f887 	bl	8003af8 <HAL_TIM_IC_CaptureCallback>
 80039ea:	e005      	b.n	80039f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f879 	bl	8003ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f88a 	bl	8003b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d10e      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d107      	bne.n	8003a2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0201 	mvn.w	r2, #1
 8003a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f7fc fc7d 	bl	8000324 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a34:	2b80      	cmp	r3, #128	; 0x80
 8003a36:	d10e      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a42:	2b80      	cmp	r3, #128	; 0x80
 8003a44:	d107      	bne.n	8003a56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f94d 	bl	8003cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a64:	d10e      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	d107      	bne.n	8003a84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f940 	bl	8003d04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d10e      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b40      	cmp	r3, #64	; 0x40
 8003a9e:	d107      	bne.n	8003ab0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f838 	bl	8003b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	f003 0320 	and.w	r3, r3, #32
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	d10e      	bne.n	8003adc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d107      	bne.n	8003adc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0220 	mvn.w	r2, #32
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f900 	bl	8003cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b00:	bf00      	nop
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a2e      	ldr	r2, [pc, #184]	; (8003c00 <TIM_Base_SetConfig+0xcc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_Base_SetConfig+0x20>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b52:	d108      	bne.n	8003b66 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a25      	ldr	r2, [pc, #148]	; (8003c00 <TIM_Base_SetConfig+0xcc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00f      	beq.n	8003b8e <TIM_Base_SetConfig+0x5a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d00b      	beq.n	8003b8e <TIM_Base_SetConfig+0x5a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a22      	ldr	r2, [pc, #136]	; (8003c04 <TIM_Base_SetConfig+0xd0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <TIM_Base_SetConfig+0x5a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a21      	ldr	r2, [pc, #132]	; (8003c08 <TIM_Base_SetConfig+0xd4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d003      	beq.n	8003b8e <TIM_Base_SetConfig+0x5a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <TIM_Base_SetConfig+0xd8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d108      	bne.n	8003ba0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0e      	ldr	r2, [pc, #56]	; (8003c00 <TIM_Base_SetConfig+0xcc>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d00b      	beq.n	8003be4 <TIM_Base_SetConfig+0xb0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <TIM_Base_SetConfig+0xd0>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_Base_SetConfig+0xb0>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a0c      	ldr	r2, [pc, #48]	; (8003c08 <TIM_Base_SetConfig+0xd4>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_Base_SetConfig+0xb0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <TIM_Base_SetConfig+0xd8>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	615a      	str	r2, [r3, #20]
}
 8003bf2:	bf00      	nop
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40014400 	.word	0x40014400
 8003c0c:	40014800 	.word	0x40014800

08003c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e04f      	b.n	8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a21      	ldr	r2, [pc, #132]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d108      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a14      	ldr	r2, [pc, #80]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d009      	beq.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c90:	d004      	beq.n	8003c9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a10      	ldr	r2, [pc, #64]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d10c      	bne.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ca2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40014000 	.word	0x40014000

08003cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <__libc_init_array>:
 8003d18:	b570      	push	{r4, r5, r6, lr}
 8003d1a:	4d0d      	ldr	r5, [pc, #52]	; (8003d50 <__libc_init_array+0x38>)
 8003d1c:	4c0d      	ldr	r4, [pc, #52]	; (8003d54 <__libc_init_array+0x3c>)
 8003d1e:	1b64      	subs	r4, r4, r5
 8003d20:	10a4      	asrs	r4, r4, #2
 8003d22:	2600      	movs	r6, #0
 8003d24:	42a6      	cmp	r6, r4
 8003d26:	d109      	bne.n	8003d3c <__libc_init_array+0x24>
 8003d28:	4d0b      	ldr	r5, [pc, #44]	; (8003d58 <__libc_init_array+0x40>)
 8003d2a:	4c0c      	ldr	r4, [pc, #48]	; (8003d5c <__libc_init_array+0x44>)
 8003d2c:	f000 f820 	bl	8003d70 <_init>
 8003d30:	1b64      	subs	r4, r4, r5
 8003d32:	10a4      	asrs	r4, r4, #2
 8003d34:	2600      	movs	r6, #0
 8003d36:	42a6      	cmp	r6, r4
 8003d38:	d105      	bne.n	8003d46 <__libc_init_array+0x2e>
 8003d3a:	bd70      	pop	{r4, r5, r6, pc}
 8003d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d40:	4798      	blx	r3
 8003d42:	3601      	adds	r6, #1
 8003d44:	e7ee      	b.n	8003d24 <__libc_init_array+0xc>
 8003d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d4a:	4798      	blx	r3
 8003d4c:	3601      	adds	r6, #1
 8003d4e:	e7f2      	b.n	8003d36 <__libc_init_array+0x1e>
 8003d50:	08003db8 	.word	0x08003db8
 8003d54:	08003db8 	.word	0x08003db8
 8003d58:	08003db8 	.word	0x08003db8
 8003d5c:	08003dbc 	.word	0x08003dbc

08003d60 <memset>:
 8003d60:	4402      	add	r2, r0
 8003d62:	4603      	mov	r3, r0
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d100      	bne.n	8003d6a <memset+0xa>
 8003d68:	4770      	bx	lr
 8003d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6e:	e7f9      	b.n	8003d64 <memset+0x4>

08003d70 <_init>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	bf00      	nop
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr

08003d7c <_fini>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr
